From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Tue, 21 Dec 2021 20:40:42 -0600
Subject: [PATCH] Mobs always drop experience


diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index 781f0adde9194162af57523aad4b73a358f622a7..97a062c48b22c34edb2a5ad8b8c2f5443e6f7556 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -50,6 +50,12 @@ public class GlowSquid extends Squid {
         return this.level().purpurConfig.glowSquidTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.glowSquidAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean canFly() {
         return this.level().purpurConfig.glowSquidsCanFly;
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index 7b647f41bd5ca4fa62795ad2fbcb5b73a3405979..b9d146547a6993a960618bfd95f617046666e8eb 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -120,6 +120,12 @@ public class Bat extends AmbientCreature {
         return this.level().purpurConfig.batTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.batAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean isFlapping() {
         return !this.isResting() && (float) this.tickCount % 10.0F == 0.0F;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index e191e27308dd8c5c8702692091541756f2b57ac1..c73cc8ffe5f67826971872de78adce72d202325a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -502,6 +502,12 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         return this.level().purpurConfig.beeBreedingTicks;
     }
     // Purpur end - Make entity breeding times configurable
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.beeAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean isSensitiveToWater() {
         return this.level().purpurConfig.beeTakeDamageFromWater;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 9bf07130a86ac8ab153eb7547c451d35eb2bb016..5a3348ca39b86cfea941fdfb98ca90a7a0ef908d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -144,6 +144,12 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
         return this.level().purpurConfig.catTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.catAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.temptGoal = new Cat.CatTemptGoal(this, 0.6D, (itemstack) -> {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Chicken.java b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
index 09ad3ca4fd5aaebb1f394e73bc030ffa798346ba..550b1035c2d6c6c7f0fc959e1a82c867c1f362d8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Chicken.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
@@ -94,6 +94,12 @@ public class Chicken extends Animal {
         return this.level().purpurConfig.chickenTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.chickenAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cod.java b/src/main/java/net/minecraft/world/entity/animal/Cod.java
index 478fb13b84609a545713371f903e4d6042747e94..a2d946aa9784e49e628fe6ebbdcbf9ce4423520f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cod.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cod.java
@@ -37,6 +37,12 @@ public class Cod extends AbstractSchoolingFish {
         return this.level().purpurConfig.codTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.codAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public ItemStack getBucketItemStack() {
         return new ItemStack(Items.COD_BUCKET);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 42324d0d22c1f1a233aa6e6a810171b26894f8bc..845206570193682f5aca5abbb6915a64fa7f5044 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -82,6 +82,12 @@ public class Cow extends Animal {
         return this.level().purpurConfig.cowTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.cowAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor world, net.minecraft.world.DifficultyInstance difficulty, net.minecraft.world.entity.EntitySpawnReason spawnReason, net.minecraft.world.entity.SpawnGroupData entityData) {
         this.isNaturallyAggressiveToPlayers = world.getLevel().purpurConfig.cowNaturallyAggressiveToPlayersChance > 0.0D && random.nextDouble() <= world.getLevel().purpurConfig.cowNaturallyAggressiveToPlayersChance;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 64d1e932ac3bc673cffa324d8e75e8da596d6941..abbf13d79b4c1ed46bd486ebbd4ff5001bb096b5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -175,6 +175,12 @@ public class Dolphin extends AgeableWaterCreature {
         return this.level().purpurConfig.dolphinTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.dolphinAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Nullable
     @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index a758f312ae4ed4a0404ca7cedbd8c7b88aef58f4..fb75b983f7c522708964a9352546ae29611bf4e9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -201,6 +201,12 @@ public class Fox extends Animal implements VariantHolder<Fox.Variant> {
         return this.level().purpurConfig.foxTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.foxAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 2cde18232b4101a5b20ca7897c0b8638eab68169..caa29df16214c60c4e0a471ad6320ea5d62ba7d0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -103,6 +103,12 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         this.summoner = summoner;
     }
     // Purpur end - Summoner API
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.ironGolemAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         if (level().purpurConfig.ironGolemCanSwim) this.goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index a8694e39954db18840e7c066ef6bcb58e3399c0b..481d373d3906f35d0e8e7aeaef3b70b4d443894f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -99,6 +99,12 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
         return this.level().purpurConfig.mooshroomTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.mooshroomAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBlockState(pos.below()).is(Blocks.MYCELIUM) ? 10.0F : world.getPathfindingCostFromLightLevels(pos);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 84b67619d38ff21a2bb8f4ea85c7d37c6794b59f..be818af35d6e9495ce4d3d3fc8212f7a22ebae92 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -101,6 +101,12 @@ public class Ocelot extends Animal {
         return this.level().purpurConfig.ocelotTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.ocelotAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public boolean isTrusting() {
         return (Boolean) this.entityData.get(Ocelot.DATA_TRUSTING);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 2081d18dc740748a37915bb7f41056bafbb93426..18bda7f4d0e0dfb2074b70e1369915c3a486e5cd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -158,6 +158,12 @@ public class Panda extends Animal {
         return this.level().purpurConfig.pandaTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.pandaAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected boolean canDispenserEquipIntoSlot(EquipmentSlot slot) {
         return slot == EquipmentSlot.MAINHAND && this.canPickUpLoot();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index eb7d6c1367ad9e4b8292987a69531cd627580167..724e7e77b1c781c3c91689eb7dfc3aed21133fd0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -206,6 +206,12 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         return this.level().purpurConfig.parrotTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.parrotAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Nullable
     @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index d1f61ab812aef23ff5eab508ce71683d88c8275d..71d5934b154356c62e1d3f01888d7c5907fd4da8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -101,6 +101,12 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         return this.level().purpurConfig.pigTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.pigAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index eb1797c50c680586178aa8b42d56e2f41b3fe2fd..986fad77b0340c344ba3a3e3a3e5bc0105625439 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -134,6 +134,12 @@ public class PolarBear extends Animal implements NeutralMob {
         return this.level().purpurConfig.polarBearTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.polarBearAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 386b0a39f5c7596ae6f682000f4cc0907275e750..a612f3e8034dd20566370c846f093b50ddef904c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -76,6 +76,12 @@ public class Pufferfish extends AbstractFish {
         return this.level().purpurConfig.pufferfishTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.pufferfishAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 688a8ad45111a71853bea22b1b9f72e3505d82a6..080551d9b55d12ef15fa2efbde1d195bc82d065c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -160,6 +160,12 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         return this.level().purpurConfig.rabbitTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.rabbitAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Salmon.java b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
index 053c2773b52bd3399c3812452dbee2d1882d32a2..b0ac0fb823cb2860e301c63c4cd2d35cdf108275 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Salmon.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
@@ -59,6 +59,12 @@ public class Salmon extends AbstractSchoolingFish implements VariantHolder<Salmo
         return this.level().purpurConfig.salmonTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.salmonAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public int getMaxSchoolSize() {
         return 5;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index a8a985c219036da9d58ad62ebdc925b62c44fce5..8c8c587646a1db8dc35fcbd85868e84a2f2697b2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -120,6 +120,12 @@ public class Sheep extends Animal implements Shearable {
         return this.level().purpurConfig.sheepTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.sheepAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.eatBlockGoal = new EatBlockGoal(this);
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index b9d2d942194784de64665e9d9d851f4027aa4db2..e338e92835d665840375049ecb475345e1631f06 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -90,6 +90,12 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
         this.summoner = summoner;
     }
     // Purpur end - Summoner API
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.snowGolemAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 600e12b135c4ad2d50247761542ffa3675113c39..a2f51788f88c20f282ea2a20485c56109b90c22b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -85,6 +85,12 @@ public class Squid extends AgeableWaterCreature {
         return this.level().purpurConfig.squidTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.squidAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public net.minecraft.world.phys.AABB getAxisForFluidCheck() {
         // Stops squids from floating just over the water
diff --git a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
index e8d3ecfcc3f25d271b81048c5d7f9722775bdbb1..26790832db3267dbfced4ce77e1a70ac2f2b6c3d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
@@ -91,6 +91,12 @@ public class TropicalFish extends AbstractSchoolingFish implements VariantHolder
         return this.level().purpurConfig.tropicalFishTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.tropicalFishAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static String getPredefinedName(int variant) {
         return "entity.minecraft.tropical_fish.predefined." + variant;
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index e18e7c264dffcff41b9d244fbc411d7aeeeeb45e..2f9cceaf189b7fe9271aeb8160abe2f284acaad8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -122,6 +122,12 @@ public class Turtle extends Animal {
         return this.level().purpurConfig.turtleTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.turtleAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public void setHomePos(BlockPos pos) {
         this.entityData.set(Turtle.HOME_POS, pos);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 615a0de7b2d6fb69ca86f1fa27e9dc7d4368bd24..30b4c09c6046c1d0843ccb8e4ff326e189b6cb95 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -221,6 +221,12 @@ public class Wolf extends TamableAnimal implements NeutralMob, VariantHolder<Hol
         return this.level().purpurConfig.wolfTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.wolfAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public void tame(Player player) {
         setCollarColor(level().purpurConfig.wolfDefaultCollarColor);
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index aff5b95fcccdba79ddc58e5e56d268aa49879b36..7af27595f5e6b8a1690acf3c0ccb2bfae78408ef 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -136,6 +136,12 @@ public class Axolotl extends Animal implements VariantHolder<Axolotl.Variant>, B
         return this.level().purpurConfig.axolotlTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.axolotlAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return 0.0F;
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 4a8ac3d75a3c75eea8e361d7eb729f27ea807347..214a97aa88c569f55619512e712b7bfe32d26b30 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -122,6 +122,12 @@ public class Goat extends Animal {
         return this.level().purpurConfig.goatTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.goatAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected Brain.Provider<Goat> brainProvider() {
         return Brain.provider(Goat.MEMORY_TYPES, Goat.SENSOR_TYPES);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
index 6a511e01f8805451ce89d697568c23803b5985a8..dc1ed34349a6d0d2f233d35a81f2c28e32b10210 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
@@ -51,6 +51,12 @@ public class Donkey extends AbstractChestedHorse {
         return this.level().purpurConfig.donkeyTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.donkeyAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.DONKEY_AMBIENT;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
index c5ba0669b7e184ac42243a65a230fe325c3f84cc..b39cbc42acacdedecfc996dbe25b3773a9fae8b2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
@@ -78,6 +78,12 @@ public class Horse extends AbstractHorse implements VariantHolder<Variant> {
         return this.level().purpurConfig.horseTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.horseAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void randomizeAttributes(RandomSource random) {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)generateMaxHealth(random::nextInt));
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index ee8d756fed5b6458b28acbd2a62a5693baddd45d..3c265a80f55eee38406066cd02460b18fbac896d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -152,6 +152,12 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
         return this.level().purpurConfig.llamaTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.llamaAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public boolean isTraderLlama() {
         return false;
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
index 8da2ff2fba266884593cefb3c192ff41afce5740..9decc32643a50bf02712f97c50eb36202bb233a8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
@@ -50,6 +50,12 @@ public class Mule extends AbstractChestedHorse {
         return this.level().purpurConfig.muleTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.muleAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.MULE_AMBIENT;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index f720deaa578d094c924be9935318ddc5817674f1..d641092fb186766417d4da7c769333ef5b16de78 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -77,6 +77,12 @@ public class SkeletonHorse extends AbstractHorse {
         return this.level().purpurConfig.skeletonHorseTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.skeletonHorseAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index 8748e41742a3d8d2d160fbd27c171f9839d5f10e..48c642308193243407353ea7a6849219b94b70e2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -83,6 +83,12 @@ public class TraderLlama extends Llama {
         return this.level().purpurConfig.traderLlamaTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.traderLlamaAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean isTraderLlama() {
         return true;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index d7f96f19c3a4eec8497ff1b8bffdf9bc5bacfbb7..339829bfc7ec9298ae6c31562ec9899d89645ebc 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -73,6 +73,12 @@ public class ZombieHorse extends AbstractHorse {
         return this.level().purpurConfig.zombieHorseTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.zombieHorseAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0).add(Attributes.MOVEMENT_SPEED, 0.2F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 9e37864a630151aee431aa4031ecc4033de1766f..a732226a889d7eafd10f4a0d7129e60542fe90e7 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -137,6 +137,12 @@ public class WitherBoss extends Monster implements RangedAttackMob {
         this.summoner = summoner;
     }
     // Purpur end - Summoner API
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.witherAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected PathNavigation createNavigation(Level world) {
         FlyingPathNavigation navigationflying = new FlyingPathNavigation(this, world);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 477e000d518522b9d546567cd96930053f8a15c5..000d18bdcc2d26b7cc175c4f72e32ac7a882f2a6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -82,6 +82,12 @@ public class Blaze extends Monster {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.blazeScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.blazeAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java b/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
index 6de7a8cf41af2a4d2988f86341ba4329f9c45361..f34880530a5220b2ef73a2e4fad39445bbad73dd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
@@ -57,6 +57,12 @@ public class CaveSpider extends Spider {
         return this.level().purpurConfig.caveSpiderTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.caveSpiderAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean doHurtTarget(ServerLevel world, Entity target) {
         if (super.doHurtTarget(world, target)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index d22a36bdabf04da4c4fe6e4699c9d78dc5b4e0c6..b87a961c1f69f0cf51d8e1e462915234ee74d0a9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -285,6 +285,12 @@ public class Creeper extends Monster {
     }
     // Purpur end - Config to make Creepers explode on death
 
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.creeperAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.CREEPER_HURT;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 1e4208f720bfafe9542691b826e4b8dccd449ef3..76db5a2d27ab435fdfd1e0ec0c77ef5012e128d4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -126,6 +126,12 @@ public class Drowned extends Zombie implements RangedAttackMob {
         return this.level().purpurConfig.drownedTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.drownedAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void addBehaviourGoals() {
         this.goalSelector.addGoal(1, new Drowned.DrownedGoToWaterGoal(this, 1.0));
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index d69716edb777155d0b52db25af64107e4657e03c..16edee73b099b66f12c45062df3108127d154921 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -58,6 +58,12 @@ public class ElderGuardian extends Guardian {
         return this.level().purpurConfig.elderGuardianTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.elderGuardianAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return Guardian.createAttributes().add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.ATTACK_DAMAGE, 8.0D).add(Attributes.MAX_HEALTH, 80.0D);
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 327686f0c47894259532a15e98d69d332a6d483a..6edc95de8fd03538c36dc1a21e4539e81647642f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -118,6 +118,12 @@ public class EnderMan extends Monster implements NeutralMob {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.endermanScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.endermanAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Endermite.java b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
index e48ebd0424828624c980e0c3e09a0cb37685be5e..b5e957f101a1bd14501a043fb1b528de25cf2f75 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Endermite.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
@@ -78,6 +78,12 @@ public class Endermite extends Monster {
         this.isPlayerSpawned = playerSpawned;
     }
     // Purpur end - Add back player spawned endermite API
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.endermiteAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 8cc90983c0e4781b4cc73040ceba069e302f7664..5e46324e9509a67debfc07614f15d282d293f717 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -83,6 +83,12 @@ public class Evoker extends SpellcasterIllager {
         return this.level().purpurConfig.evokerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.evokerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 67bc0ec362929099e741486e3424770478a046d9..d410824d481a83d11919c045e572eaffab3d9a9f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -91,6 +91,12 @@ public class Ghast extends FlyingMob implements Enemy {
         return this.level().purpurConfig.ghastTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.ghastAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/monster/Giant.java b/src/main/java/net/minecraft/world/entity/monster/Giant.java
index 4bf1414569685e9e8704216c9dcf585def88b2e5..a7996b600a94f87629a26349c317b379aef4b5a7 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Giant.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Giant.java
@@ -65,6 +65,12 @@ public class Giant extends Monster {
         return this.level().purpurConfig.giantTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.giantAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 100.0).add(Attributes.MOVEMENT_SPEED, 0.5).add(Attributes.ATTACK_DAMAGE, 50.0);
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Guardian.java b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
index 01917ec09069be5d8b1051969367df1e53ff38ca..929864ee4e5e6e9c87d10bb1bb06118cd94bd5d7 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Guardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
@@ -104,6 +104,12 @@ public class Guardian extends Monster {
         return this.level().purpurConfig.guardianTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.guardianAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         MoveTowardsRestrictionGoal pathfindergoalmovetowardsrestriction = new MoveTowardsRestrictionGoal(this, 1.0D);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 9f0b91de19ecdb0f74fe6d93a1e75c27c262ee07..c41a9b4bb24cc801b8460ce7e63695fdec146c5d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -74,6 +74,12 @@ public class Husk extends Zombie {
         return this.level().purpurConfig.huskTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.huskAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static boolean checkHuskSpawnRules(EntityType<Husk> type, ServerLevelAccessor world, EntitySpawnReason spawnReason, BlockPos pos, RandomSource random) {
         return checkMonsterSpawnRules(type, world, spawnReason, pos, random) && (EntitySpawnReason.isSpawner(spawnReason) || world.canSeeSky(pos));
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index d0fe85e7c44b78a078e6c2d6220849a336b079d3..83b64a8091a85b9eb940af33e4d44bd4a906b248 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -91,6 +91,12 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         return this.level().purpurConfig.illusionerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.illusionerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index 8f0e9f854c4032c43cc1c9a8b087a5fa286326d8..2449a960493cbd99a22ce9b8d2fe852d1ec4b20d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -73,6 +73,12 @@ public class MagmaCube extends Slime {
         return this.level().purpurConfig.magmaCubeTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.magmaCubeAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, 0.2F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 71bbb3209acc12c9f20b8964770be8666a7e72f8..0682479b37064d7690c8da1569de8f7452a0439d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -145,6 +145,12 @@ public class Phantom extends FlyingMob implements Enemy {
         return crystalPosition != null;
     }
     // Purpur end - Phantoms attracted to crystals and crystals shoot phantoms
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.phantomAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean isFlapping() {
         return (this.getUniqueFlapTickOffset() + this.tickCount) % Phantom.TICKS_PER_FLAP == 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index 0bc9ee0de4f30d4d57164e02992856a0bfa92041..5b98144992c366009a2b2c48e13884ceaf72acfb 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -97,6 +97,12 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob, Inve
         return this.level().purpurConfig.pillagerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.pillagerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 7fb2af68c101dc12e60f120da1bb5c1efd20d164..95562e3614880702655df4578119e6cf3702e566 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -111,6 +111,12 @@ public class Ravager extends Raider {
         return this.level().purpurConfig.ravagerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.ravagerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 2052549f2e6b23aff5491bb0cc1af00b7f560227..78ac42c89cb768e0dfb17197a850a029937c145c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -126,6 +126,12 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
         return this.level().purpurConfig.shulkerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.shulkerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected net.minecraft.world.InteractionResult mobInteract(Player player, net.minecraft.world.InteractionHand hand) {
         net.minecraft.world.item.ItemStack itemstack = player.getItemInHand(hand);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
index 256b57f6aea44cdfd209a546f98c5b0538b8242b..78aec4acc84b228537f90172f2e4c346b665bc0b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
@@ -76,6 +76,12 @@ public class Silverfish extends Monster {
         return this.level().purpurConfig.silverfishTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.silverfishAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.friendsGoal = new Silverfish.SilverfishWakeUpFriendsGoal(this);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index 2bbdaaad2ab0d44dc27172a81df732c03ec8147d..93b570c0d18f2fc76180c5c6ea292e191cb81be2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -58,6 +58,12 @@ public class Skeleton extends AbstractSkeleton {
         return this.level().purpurConfig.skeletonTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.skeletonAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index b48210e8e08ca607b272d78cf5697b89dd3201a0..d58f7b251d0c322d63e7e5e8ed30b41427a11227 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -145,6 +145,12 @@ public class Slime extends Mob implements Enemy {
         return this.level().purpurConfig.slimeTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.slimeAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index cb61d3b402155241dc66ac05893c44e76c104dfc..12bae0aa2f1cf3059b9c70f5377649cd9f8257aa 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -81,6 +81,12 @@ public class Spider extends Monster {
         return this.level().purpurConfig.spiderTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.spiderAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Stray.java b/src/main/java/net/minecraft/world/entity/monster/Stray.java
index 874727cd86f530c4ddb895fd6e005d9b9ec20daa..b8b9b4316bebae4564fac4c56b303735b86563fb 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Stray.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Stray.java
@@ -51,6 +51,12 @@ public class Stray extends AbstractSkeleton {
         return this.level().purpurConfig.strayTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.strayAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static boolean checkStraySpawnRules(
         EntityType<Stray> type, ServerLevelAccessor world, EntitySpawnReason spawnReason, BlockPos pos, RandomSource random
     ) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 420118b1df271377f69e8e2bab8a62623382c819..df44d9fbb71ff252cd261fc8da6de14383e054de 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -127,6 +127,12 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         return this.level().purpurConfig.striderBreedingTicks;
     }
     // Purpur end - Make entity breeding times configurable
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.striderAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static boolean checkStriderSpawnRules(EntityType<Strider> type, LevelAccessor world, EntitySpawnReason spawnReason, BlockPos pos, RandomSource random) {
         BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable();
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index 1630074bf8065a7ecf49d426f8d5fe5e109b1d2c..ec61bc0d9b934ceed15b721e86200abfea21a923 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -116,6 +116,12 @@ public class Vex extends Monster implements TraceableEntity {
         return this.level().purpurConfig.vexTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.vexAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean isFlapping() {
         return this.tickCount % Vex.TICKS_PER_FLAP == 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index 5693081f061dcefbfda374c26a6ab5be0c2e2fcc..3d1cb875edfe6bf5c9e3f4b7dade7868b7dbfa93 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -85,6 +85,12 @@ public class Vindicator extends AbstractIllager {
         return this.level().purpurConfig.vindicatorTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.vindicatorAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index f77ce3de847ea5c7f40bfa6bd4bba254dc863bd0..8e7f4cb8ede8721f05c6c35e9b4d08884254853e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -87,6 +87,12 @@ public class Witch extends Raider implements RangedAttackMob {
         return this.level().purpurConfig.witchTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.witchAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         super.registerGoals();
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index 1a864ebb6257f34e8fb7a543d6da19cfa96bb7d0..351a35bdcb820c9c65aeddfbe0f00486d8057f7c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -66,6 +66,12 @@ public class WitherSkeleton extends AbstractSkeleton {
         return this.level().purpurConfig.witherSkeletonTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.witherSkeletonAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractPiglin.class, true));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 1c2c0f94811f934804cfb0be15fa55c0281ad0ba..8aec50e7330d16bd3d0bc027c191fa1a4ce4552b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -115,6 +115,12 @@ public class Zoglin extends Monster implements HoglinBase {
         return this.level().purpurConfig.zoglinTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.zoglinAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected Brain.Provider<Zoglin> brainProvider() {
         return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 37ee837f6e722cd4cb07ae9fcd366a1473dc0b49..867d9ddce630482a7d3fadfe5aab213a0f912ca4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -154,6 +154,12 @@ public class Zombie extends Monster {
         return this.level().purpurConfig.zombieTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.zombieAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur - Ridables
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 40490767e474bc1e954c8f837f25268d2fd38f5b..bba3562bf316878e7b8ba6a138889d9583a1b0f6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -135,6 +135,12 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         return this.level().purpurConfig.zombieVillagerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.zombieVillagerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index 3070f4484276f8ea6b95134abda6409e58f1161a..c0e611f3222ffacfbd0683c8c65b778f9012a2ad 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -109,6 +109,12 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         return this.level().purpurConfig.zombifiedPiglinTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.zombifiedPiglinAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public void setPersistentAngerTarget(@Nullable UUID angryAt) {
         this.persistentAngerTarget = angryAt;
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 534626336e45da2c67cb023f4e5feea59daa8b5d..5e8da964681cb63d7733af8b5173715fd7e54a63 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -112,6 +112,12 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
         return this.level().purpurConfig.hoglinTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.hoglinAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public boolean canBeLeashed() {
         return true;
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index f0b0642571a242f9c22febbafba587f1ca6caaaa..468be0368d0f485eaa2a5c321f45986bf5156b4b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -129,6 +129,12 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         return this.level().purpurConfig.piglinTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.piglinAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 0e77e9e4a4fd14b5cecc377a03f0d6b2c9df039f..24e198440d4841daac664dc6c5a8a3dc6825b469 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -95,6 +95,12 @@ public class PiglinBrute extends AbstractPiglin {
         return this.level().purpurConfig.piglinBruteTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.piglinBruteAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     public static AttributeSupplier.Builder createAttributes() {
         return Monster.createMonsterAttributes()
             .add(Attributes.MAX_HEALTH, 50.0)
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index c912268081beda34c472cff13e41c9dfd51902f2..fcaf3db893d14b8359bddc1cc69da82e533ebc87 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -199,6 +199,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return this.level().purpurConfig.villagerTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.villagerAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 2cfd9c9194edda92185adecca80c5cd140e26c9f..89ad300d0ba9088af64fb9fee19399939bb4eff6 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -113,6 +113,12 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
         return this.level().purpurConfig.wanderingTraderTakeDamageFromWater;
     }
     // Purpur end - Toggle for water sensitive mob damage
+    // Purpur start - Mobs always drop experience
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.wanderingTraderAlwaysDropExp;
+    }
+    // Purpur end - Mobs always drop experience
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 1f5b541cd87c4e6fafbd1ee9b75d4a323aeacaa1..d1a20069971e46a5bd58a31390b54f9216d9cb64 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -1096,6 +1096,7 @@ public class PurpurWorldConfig {
     public double axolotlScale = 1.0D;
     public int axolotlBreedingTicks = 6000;
     public boolean axolotlTakeDamageFromWater = false;
+    public boolean axolotlAlwaysDropExp = false;
     private void axolotlSettings() {
         axolotlRidable = getBoolean("mobs.axolotl.ridable", axolotlRidable);
         axolotlControllable = getBoolean("mobs.axolotl.controllable", axolotlControllable);
@@ -1103,6 +1104,7 @@ public class PurpurWorldConfig {
         axolotlScale = Mth.clamp(getDouble("mobs.axolotl.attributes.scale", axolotlScale), 0.0625D, 16.0D);
         axolotlBreedingTicks = getInt("mobs.axolotl.breeding-delay-ticks", axolotlBreedingTicks);
         axolotlTakeDamageFromWater = getBoolean("mobs.axolotl.takes-damage-from-water", axolotlTakeDamageFromWater);
+        axolotlAlwaysDropExp = getBoolean("mobs.axolotl.always-drop-exp", axolotlAlwaysDropExp);
     }
 
     public boolean batRidable = false;
@@ -1119,6 +1121,7 @@ public class PurpurWorldConfig {
     public double batArmorToughness = 0.0D;
     public double batAttackKnockback = 0.0D;
     public boolean batTakeDamageFromWater = false;
+    public boolean batAlwaysDropExp = false;
     private void batSettings() {
         batRidable = getBoolean("mobs.bat.ridable", batRidable);
         batRidableInWater = getBoolean("mobs.bat.ridable-in-water", batRidableInWater);
@@ -1139,6 +1142,7 @@ public class PurpurWorldConfig {
         batArmorToughness = getDouble("mobs.bat.attributes.armor_toughness", batArmorToughness);
         batAttackKnockback = getDouble("mobs.bat.attributes.attack_knockback", batAttackKnockback);
         batTakeDamageFromWater = getBoolean("mobs.bat.takes-damage-from-water", batTakeDamageFromWater);
+        batAlwaysDropExp = getBoolean("mobs.bat.always-drop-exp", batAlwaysDropExp);
     }
 
     public boolean beeRidable = false;
@@ -1151,6 +1155,7 @@ public class PurpurWorldConfig {
     public boolean beeTakeDamageFromWater = true;
     public boolean beeCanWorkAtNight = false;
     public boolean beeCanWorkInRain = false;
+    public boolean beeAlwaysDropExp = false;
     private void beeSettings() {
         beeRidable = getBoolean("mobs.bee.ridable", beeRidable);
         beeRidableInWater = getBoolean("mobs.bee.ridable-in-water", beeRidableInWater);
@@ -1167,6 +1172,7 @@ public class PurpurWorldConfig {
         beeTakeDamageFromWater = getBoolean("mobs.bee.takes-damage-from-water", beeTakeDamageFromWater);
         beeCanWorkAtNight = getBoolean("mobs.bee.can-work-at-night", beeCanWorkAtNight);
         beeCanWorkInRain = getBoolean("mobs.bee.can-work-in-rain", beeCanWorkInRain);
+        beeAlwaysDropExp = getBoolean("mobs.bee.always-drop-exp", beeAlwaysDropExp);
     }
 
     public boolean blazeRidable = false;
@@ -1176,6 +1182,7 @@ public class PurpurWorldConfig {
     public double blazeMaxHealth = 20.0D;
     public double blazeScale = 1.0D;
     public boolean blazeTakeDamageFromWater = true;
+    public boolean blazeAlwaysDropExp = false;
     private void blazeSettings() {
         blazeRidable = getBoolean("mobs.blaze.ridable", blazeRidable);
         blazeRidableInWater = getBoolean("mobs.blaze.ridable-in-water", blazeRidableInWater);
@@ -1189,6 +1196,7 @@ public class PurpurWorldConfig {
         blazeMaxHealth = getDouble("mobs.blaze.attributes.max_health", blazeMaxHealth);
         blazeScale = Mth.clamp(getDouble("mobs.blaze.attributes.scale", blazeScale), 0.0625D, 16.0D);
         blazeTakeDamageFromWater = getBoolean("mobs.blaze.takes-damage-from-water", blazeTakeDamageFromWater);
+        blazeAlwaysDropExp = getBoolean("mobs.blaze.always-drop-exp", blazeAlwaysDropExp);
     }
 
     public boolean boggedRidable = false;
@@ -1234,6 +1242,7 @@ public class PurpurWorldConfig {
     public int catBreedingTicks = 6000;
     public DyeColor catDefaultCollarColor = DyeColor.RED;
     public boolean catTakeDamageFromWater = false;
+    public boolean catAlwaysDropExp = false;
     private void catSettings() {
         catRidable = getBoolean("mobs.cat.ridable", catRidable);
         catRidableInWater = getBoolean("mobs.cat.ridable-in-water", catRidableInWater);
@@ -1255,6 +1264,7 @@ public class PurpurWorldConfig {
             catDefaultCollarColor = DyeColor.RED;
         }
         catTakeDamageFromWater = getBoolean("mobs.cat.takes-damage-from-water", catTakeDamageFromWater);
+        catAlwaysDropExp = getBoolean("mobs.cat.always-drop-exp", catAlwaysDropExp);
     }
 
     public boolean caveSpiderRidable = false;
@@ -1263,6 +1273,7 @@ public class PurpurWorldConfig {
     public double caveSpiderMaxHealth = 12.0D;
     public double caveSpiderScale = 1.0D;
     public boolean caveSpiderTakeDamageFromWater = false;
+    public boolean caveSpiderAlwaysDropExp = false;
     private void caveSpiderSettings() {
         caveSpiderRidable = getBoolean("mobs.cave_spider.ridable", caveSpiderRidable);
         caveSpiderRidableInWater = getBoolean("mobs.cave_spider.ridable-in-water", caveSpiderRidableInWater);
@@ -1275,6 +1286,7 @@ public class PurpurWorldConfig {
         caveSpiderMaxHealth = getDouble("mobs.cave_spider.attributes.max_health", caveSpiderMaxHealth);
         caveSpiderScale = Mth.clamp(getDouble("mobs.cave_spider.attributes.scale", caveSpiderScale), 0.0625D, 16.0D);
         caveSpiderTakeDamageFromWater = getBoolean("mobs.cave_spider.takes-damage-from-water", caveSpiderTakeDamageFromWater);
+        caveSpiderAlwaysDropExp = getBoolean("mobs.cave_spider.always-drop-exp", caveSpiderAlwaysDropExp);
     }
 
     public boolean chickenRidable = false;
@@ -1285,6 +1297,7 @@ public class PurpurWorldConfig {
     public boolean chickenRetaliate = false;
     public int chickenBreedingTicks = 6000;
     public boolean chickenTakeDamageFromWater = false;
+    public boolean chickenAlwaysDropExp = false;
     private void chickenSettings() {
         chickenRidable = getBoolean("mobs.chicken.ridable", chickenRidable);
         chickenRidableInWater = getBoolean("mobs.chicken.ridable-in-water", chickenRidableInWater);
@@ -1299,6 +1312,7 @@ public class PurpurWorldConfig {
         chickenRetaliate = getBoolean("mobs.chicken.retaliate", chickenRetaliate);
         chickenBreedingTicks = getInt("mobs.chicken.breeding-delay-ticks", chickenBreedingTicks);
         chickenTakeDamageFromWater = getBoolean("mobs.chicken.takes-damage-from-water", chickenTakeDamageFromWater);
+        chickenAlwaysDropExp = getBoolean("mobs.chicken.always-drop-exp", chickenAlwaysDropExp);
     }
 
     public boolean codRidable = false;
@@ -1306,6 +1320,7 @@ public class PurpurWorldConfig {
     public double codMaxHealth = 3.0D;
     public double codScale = 1.0D;
     public boolean codTakeDamageFromWater = false;
+    public boolean codAlwaysDropExp = false;
     private void codSettings() {
         codRidable = getBoolean("mobs.cod.ridable", codRidable);
         codControllable = getBoolean("mobs.cod.controllable", codControllable);
@@ -1317,6 +1332,7 @@ public class PurpurWorldConfig {
         codMaxHealth = getDouble("mobs.cod.attributes.max_health", codMaxHealth);
         codScale = Mth.clamp(getDouble("mobs.cod.attributes.scale", codScale), 0.0625D, 16.0D);
         codTakeDamageFromWater = getBoolean("mobs.cod.takes-damage-from-water", codTakeDamageFromWater);
+        codAlwaysDropExp = getBoolean("mobs.cod.always-drop-exp", codAlwaysDropExp);
     }
 
     public boolean cowRidable = false;
@@ -1329,6 +1345,7 @@ public class PurpurWorldConfig {
     public boolean cowTakeDamageFromWater = false;
     public double cowNaturallyAggressiveToPlayersChance = 0.0D;
     public double cowNaturallyAggressiveToPlayersDamage = 2.0D;
+    public boolean cowAlwaysDropExp = false;
     private void cowSettings() {
         if (PurpurConfig.version < 22) {
             double oldValue = getDouble("mobs.cow.naturally-aggressive-to-players-chance", cowNaturallyAggressiveToPlayersChance);
@@ -1350,6 +1367,7 @@ public class PurpurWorldConfig {
         cowTakeDamageFromWater = getBoolean("mobs.cow.takes-damage-from-water", cowTakeDamageFromWater);
         cowNaturallyAggressiveToPlayersChance = getDouble("mobs.cow.naturally-aggressive-to-players.chance", cowNaturallyAggressiveToPlayersChance);
         cowNaturallyAggressiveToPlayersDamage = getDouble("mobs.cow.naturally-aggressive-to-players.damage", cowNaturallyAggressiveToPlayersDamage);
+        cowAlwaysDropExp = getBoolean("mobs.cow.always-drop-exp", cowAlwaysDropExp);
     }
 
     public boolean creakingRidable = false;
@@ -1376,6 +1394,7 @@ public class PurpurWorldConfig {
     public boolean creeperTakeDamageFromWater = false;
     public boolean creeperExplodeWhenKilled = false;
     public boolean creeperHealthRadius = false;
+    public boolean creeperAlwaysDropExp = false;
     private void creeperSettings() {
         creeperRidable = getBoolean("mobs.creeper.ridable", creeperRidable);
         creeperRidableInWater = getBoolean("mobs.creeper.ridable-in-water", creeperRidableInWater);
@@ -1393,6 +1412,7 @@ public class PurpurWorldConfig {
         creeperTakeDamageFromWater = getBoolean("mobs.creeper.takes-damage-from-water", creeperTakeDamageFromWater);
         creeperExplodeWhenKilled = getBoolean("mobs.creeper.explode-when-killed", creeperExplodeWhenKilled);
         creeperHealthRadius = getBoolean("mobs.creeper.health-impacts-explosion", creeperHealthRadius);
+        creeperAlwaysDropExp = getBoolean("mobs.creeper.always-drop-exp", creeperAlwaysDropExp);
     }
 
     public boolean dolphinRidable = false;
@@ -1405,6 +1425,7 @@ public class PurpurWorldConfig {
     public boolean dolphinDisableTreasureSearching = false;
     public boolean dolphinTakeDamageFromWater = false;
     public double dolphinNaturallyAggressiveToPlayersChance = 0.0D;
+    public boolean dolphinAlwaysDropExp = false;
     private void dolphinSettings() {
         dolphinRidable = getBoolean("mobs.dolphin.ridable", dolphinRidable);
         dolphinControllable = getBoolean("mobs.dolphin.controllable", dolphinControllable);
@@ -1421,6 +1442,7 @@ public class PurpurWorldConfig {
         dolphinDisableTreasureSearching = getBoolean("mobs.dolphin.disable-treasure-searching", dolphinDisableTreasureSearching);
         dolphinTakeDamageFromWater = getBoolean("mobs.dolphin.takes-damage-from-water", dolphinTakeDamageFromWater);
         dolphinNaturallyAggressiveToPlayersChance = getDouble("mobs.dolphin.naturally-aggressive-to-players-chance", dolphinNaturallyAggressiveToPlayersChance);
+        dolphinAlwaysDropExp = getBoolean("mobs.dolphin.always-drop-exp", dolphinAlwaysDropExp);
     }
 
     public boolean donkeyRidableInWater = false;
@@ -1432,6 +1454,7 @@ public class PurpurWorldConfig {
     public double donkeyMovementSpeedMax = 0.175D;
     public int donkeyBreedingTicks = 6000;
     public boolean donkeyTakeDamageFromWater = false;
+    public boolean donkeyAlwaysDropExp = false;
     private void donkeySettings() {
         donkeyRidableInWater = getBoolean("mobs.donkey.ridable-in-water", donkeyRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1449,6 +1472,7 @@ public class PurpurWorldConfig {
         donkeyMovementSpeedMax = getDouble("mobs.donkey.attributes.movement_speed.max", donkeyMovementSpeedMax);
         donkeyBreedingTicks = getInt("mobs.donkey.breeding-delay-ticks", donkeyBreedingTicks);
         donkeyTakeDamageFromWater = getBoolean("mobs.donkey.takes-damage-from-water", donkeyTakeDamageFromWater);
+        donkeyAlwaysDropExp = getBoolean("mobs.donkey.always-drop-exp", donkeyAlwaysDropExp);
     }
 
     public boolean drownedRidable = false;
@@ -1462,6 +1486,7 @@ public class PurpurWorldConfig {
     public boolean drownedJockeyTryExistingChickens = true;
     public boolean drownedTakeDamageFromWater = false;
     public boolean drownedBreakDoors = false;
+    public boolean drownedAlwaysDropExp = false;
     private void drownedSettings() {
         drownedRidable = getBoolean("mobs.drowned.ridable", drownedRidable);
         drownedRidableInWater = getBoolean("mobs.drowned.ridable-in-water", drownedRidableInWater);
@@ -1479,6 +1504,7 @@ public class PurpurWorldConfig {
         drownedJockeyTryExistingChickens = getBoolean("mobs.drowned.jockey.try-existing-chickens", drownedJockeyTryExistingChickens);
         drownedTakeDamageFromWater = getBoolean("mobs.drowned.takes-damage-from-water", drownedTakeDamageFromWater);
         drownedBreakDoors = getBoolean("mobs.drowned.can-break-doors", drownedBreakDoors);
+        drownedAlwaysDropExp = getBoolean("mobs.drowned.always-drop-exp", drownedAlwaysDropExp);
     }
 
     public boolean elderGuardianRidable = false;
@@ -1486,6 +1512,7 @@ public class PurpurWorldConfig {
     public double elderGuardianMaxHealth = 80.0D;
     public double elderGuardianScale = 1.0D;
     public boolean elderGuardianTakeDamageFromWater = false;
+    public boolean elderGuardianAlwaysDropExp = false;
     private void elderGuardianSettings() {
         elderGuardianRidable = getBoolean("mobs.elder_guardian.ridable", elderGuardianRidable);
         elderGuardianControllable = getBoolean("mobs.elder_guardian.controllable", elderGuardianControllable);
@@ -1497,6 +1524,7 @@ public class PurpurWorldConfig {
         elderGuardianMaxHealth = getDouble("mobs.elder_guardian.attributes.max_health", elderGuardianMaxHealth);
         elderGuardianScale = Mth.clamp(getDouble("mobs.elder_guardian.attributes.scale", elderGuardianScale), 0.0625D, 16.0D);
         elderGuardianTakeDamageFromWater = getBoolean("mobs.elder_guardian.takes-damage-from-water", elderGuardianTakeDamageFromWater);
+        elderGuardianAlwaysDropExp = getBoolean("mobs.elder_guardian.always-drop-exp", elderGuardianAlwaysDropExp);
     }
 
     public boolean enderDragonRidable = false;
@@ -1542,6 +1570,7 @@ public class PurpurWorldConfig {
     public boolean endermanAggroEndermitesOnlyIfPlayerSpawned = false;
     public boolean endermanDisableStareAggro = false;
     public boolean endermanIgnoreProjectiles = false;
+    public boolean endermanAlwaysDropExp = false;
     private void endermanSettings() {
         endermanRidable = getBoolean("mobs.enderman.ridable", endermanRidable);
         endermanRidableInWater = getBoolean("mobs.enderman.ridable-in-water", endermanRidableInWater);
@@ -1565,6 +1594,7 @@ public class PurpurWorldConfig {
         endermanAggroEndermitesOnlyIfPlayerSpawned = getBoolean("mobs.enderman.aggressive-towards-endermites-only-spawned-by-player-thrown-ender-pearls", endermanAggroEndermitesOnlyIfPlayerSpawned);
         endermanDisableStareAggro = getBoolean("mobs.enderman.disable-player-stare-aggression", endermanDisableStareAggro);
         endermanIgnoreProjectiles = getBoolean("mobs.enderman.ignore-projectiles", endermanIgnoreProjectiles);
+        endermanAlwaysDropExp = getBoolean("mobs.enderman.always-drop-exp", endermanAlwaysDropExp);
     }
 
     public boolean endermiteRidable = false;
@@ -1573,6 +1603,7 @@ public class PurpurWorldConfig {
     public double endermiteMaxHealth = 8.0D;
     public double endermiteScale = 1.0D;
     public boolean endermiteTakeDamageFromWater = false;
+    public boolean endermiteAlwaysDropExp = false;
     private void endermiteSettings() {
         endermiteRidable = getBoolean("mobs.endermite.ridable", endermiteRidable);
         endermiteRidableInWater = getBoolean("mobs.endermite.ridable-in-water", endermiteRidableInWater);
@@ -1585,6 +1616,7 @@ public class PurpurWorldConfig {
         endermiteMaxHealth = getDouble("mobs.endermite.attributes.max_health", endermiteMaxHealth);
         endermiteScale = Mth.clamp(getDouble("mobs.endermite.attributes.scale", endermiteScale), 0.0625D, 16.0D);
         endermiteTakeDamageFromWater = getBoolean("mobs.endermite.takes-damage-from-water", endermiteTakeDamageFromWater);
+        endermiteAlwaysDropExp = getBoolean("mobs.endermite.always-drop-exp", endermiteAlwaysDropExp);
     }
 
     public boolean evokerRidable = false;
@@ -1594,6 +1626,7 @@ public class PurpurWorldConfig {
     public double evokerScale = 1.0D;
     public boolean evokerBypassMobGriefing = false;
     public boolean evokerTakeDamageFromWater = false;
+    public boolean evokerAlwaysDropExp = false;
     private void evokerSettings() {
         evokerRidable = getBoolean("mobs.evoker.ridable", evokerRidable);
         evokerRidableInWater = getBoolean("mobs.evoker.ridable-in-water", evokerRidableInWater);
@@ -1607,6 +1640,7 @@ public class PurpurWorldConfig {
         evokerScale = Mth.clamp(getDouble("mobs.evoker.attributes.scale", evokerScale), 0.0625D, 16.0D);
         evokerBypassMobGriefing = getBoolean("mobs.evoker.bypass-mob-griefing", evokerBypassMobGriefing);
         evokerTakeDamageFromWater = getBoolean("mobs.evoker.takes-damage-from-water", evokerTakeDamageFromWater);
+        evokerAlwaysDropExp = getBoolean("mobs.evoker.always-drop-exp", evokerAlwaysDropExp);
     }
 
     public boolean foxRidable = false;
@@ -1618,6 +1652,7 @@ public class PurpurWorldConfig {
     public int foxBreedingTicks = 6000;
     public boolean foxBypassMobGriefing = false;
     public boolean foxTakeDamageFromWater = false;
+    public boolean foxAlwaysDropExp = false;
     private void foxSettings() {
         foxRidable = getBoolean("mobs.fox.ridable", foxRidable);
         foxRidableInWater = getBoolean("mobs.fox.ridable-in-water", foxRidableInWater);
@@ -1633,6 +1668,7 @@ public class PurpurWorldConfig {
         foxBreedingTicks = getInt("mobs.fox.breeding-delay-ticks", foxBreedingTicks);
         foxBypassMobGriefing = getBoolean("mobs.fox.bypass-mob-griefing", foxBypassMobGriefing);
         foxTakeDamageFromWater = getBoolean("mobs.fox.takes-damage-from-water", foxTakeDamageFromWater);
+        foxAlwaysDropExp = getBoolean("mobs.fox.always-drop-exp", foxAlwaysDropExp);
     }
 
     public boolean frogRidable = false;
@@ -1655,6 +1691,7 @@ public class PurpurWorldConfig {
     public double ghastMaxHealth = 10.0D;
     public double ghastScale = 1.0D;
     public boolean ghastTakeDamageFromWater = false;
+    public boolean ghastAlwaysDropExp = false;
     private void ghastSettings() {
         ghastRidable = getBoolean("mobs.ghast.ridable", ghastRidable);
         ghastRidableInWater = getBoolean("mobs.ghast.ridable-in-water", ghastRidableInWater);
@@ -1668,6 +1705,7 @@ public class PurpurWorldConfig {
         ghastMaxHealth = getDouble("mobs.ghast.attributes.max_health", ghastMaxHealth);
         ghastScale = Mth.clamp(getDouble("mobs.ghast.attributes.scale", ghastScale), 0.0625D, 16.0D);
         ghastTakeDamageFromWater = getBoolean("mobs.ghast.takes-damage-from-water", ghastTakeDamageFromWater);
+        ghastAlwaysDropExp = getBoolean("mobs.ghast.always-drop-exp", ghastAlwaysDropExp);
     }
 
     public boolean giantRidable = false;
@@ -1682,6 +1720,7 @@ public class PurpurWorldConfig {
     public boolean giantHaveAI = false;
     public boolean giantHaveHostileAI = false;
     public boolean giantTakeDamageFromWater = false;
+    public boolean giantAlwaysDropExp = false;
     private void giantSettings() {
         giantRidable = getBoolean("mobs.giant.ridable", giantRidable);
         giantRidableInWater = getBoolean("mobs.giant.ridable-in-water", giantRidableInWater);
@@ -1704,6 +1743,7 @@ public class PurpurWorldConfig {
         giantHaveAI = getBoolean("mobs.giant.have-ai", giantHaveAI);
         giantHaveHostileAI = getBoolean("mobs.giant.have-hostile-ai", giantHaveHostileAI);
         giantTakeDamageFromWater = getBoolean("mobs.giant.takes-damage-from-water", giantTakeDamageFromWater);
+        giantAlwaysDropExp = getBoolean("mobs.giant.always-drop-exp", giantAlwaysDropExp);
     }
 
     public boolean glowSquidRidable = false;
@@ -1712,6 +1752,7 @@ public class PurpurWorldConfig {
     public double glowSquidScale = 1.0D;
     public boolean glowSquidsCanFly = false;
     public boolean glowSquidTakeDamageFromWater = false;
+    public boolean glowSquidAlwaysDropExp = false;
     private void glowSquidSettings() {
         glowSquidRidable = getBoolean("mobs.glow_squid.ridable", glowSquidRidable);
         glowSquidControllable = getBoolean("mobs.glow_squid.controllable", glowSquidControllable);
@@ -1719,6 +1760,7 @@ public class PurpurWorldConfig {
         glowSquidScale = Mth.clamp(getDouble("mobs.glow_squid.attributes.scale", glowSquidScale), 0.0625D, 16.0D);
         glowSquidsCanFly = getBoolean("mobs.glow_squid.can-fly", glowSquidsCanFly);
         glowSquidTakeDamageFromWater = getBoolean("mobs.glow_squid.takes-damage-from-water", glowSquidTakeDamageFromWater);
+        glowSquidAlwaysDropExp = getBoolean("mobs.glow_squid.always-drop-exp", glowSquidAlwaysDropExp);
     }
 
     public boolean goatRidable = false;
@@ -1728,6 +1770,7 @@ public class PurpurWorldConfig {
     public double goatScale = 1.0D;
     public int goatBreedingTicks = 6000;
     public boolean goatTakeDamageFromWater = false;
+    public boolean goatAlwaysDropExp = false;
     private void goatSettings() {
         goatRidable = getBoolean("mobs.goat.ridable", goatRidable);
         goatRidableInWater = getBoolean("mobs.goat.ridable-in-water", goatRidableInWater);
@@ -1736,6 +1779,7 @@ public class PurpurWorldConfig {
         goatScale = Mth.clamp(getDouble("mobs.goat.attributes.scale", goatScale), 0.0625D, 16.0D);
         goatBreedingTicks = getInt("mobs.goat.breeding-delay-ticks", goatBreedingTicks);
         goatTakeDamageFromWater = getBoolean("mobs.goat.takes-damage-from-water", goatTakeDamageFromWater);
+        goatAlwaysDropExp = getBoolean("mobs.goat.always-drop-exp", goatAlwaysDropExp);
     }
 
     public boolean guardianRidable = false;
@@ -1743,6 +1787,7 @@ public class PurpurWorldConfig {
     public double guardianMaxHealth = 30.0D;
     public double guardianScale = 1.0D;
     public boolean guardianTakeDamageFromWater = false;
+    public boolean guardianAlwaysDropExp = false;
     private void guardianSettings() {
         guardianRidable = getBoolean("mobs.guardian.ridable", guardianRidable);
         guardianControllable = getBoolean("mobs.guardian.controllable", guardianControllable);
@@ -1754,6 +1799,7 @@ public class PurpurWorldConfig {
         guardianMaxHealth = getDouble("mobs.guardian.attributes.max_health", guardianMaxHealth);
         guardianScale = Mth.clamp(getDouble("mobs.guardian.attributes.scale", guardianScale), 0.0625D, 16.0D);
         guardianTakeDamageFromWater = getBoolean("mobs.guardian.takes-damage-from-water", guardianTakeDamageFromWater);
+        guardianAlwaysDropExp = getBoolean("mobs.guardian.always-drop-exp", guardianAlwaysDropExp);
     }
 
     public boolean forceHalloweenSeason = false;
@@ -1770,6 +1816,7 @@ public class PurpurWorldConfig {
     public double hoglinScale = 1.0D;
     public int hoglinBreedingTicks = 6000;
     public boolean hoglinTakeDamageFromWater = false;
+    public boolean hoglinAlwaysDropExp = false;
     private void hoglinSettings() {
         hoglinRidable = getBoolean("mobs.hoglin.ridable", hoglinRidable);
         hoglinRidableInWater = getBoolean("mobs.hoglin.ridable-in-water", hoglinRidableInWater);
@@ -1783,6 +1830,7 @@ public class PurpurWorldConfig {
         hoglinScale = Mth.clamp(getDouble("mobs.hoglin.attributes.scale", hoglinScale), 0.0625D, 16.0D);
         hoglinBreedingTicks = getInt("mobs.hoglin.breeding-delay-ticks", hoglinBreedingTicks);
         hoglinTakeDamageFromWater = getBoolean("mobs.hoglin.takes-damage-from-water", hoglinTakeDamageFromWater);
+        hoglinAlwaysDropExp = getBoolean("mobs.hoglin.always-drop-exp", hoglinAlwaysDropExp);
     }
 
     public boolean horseRidableInWater = false;
@@ -1794,6 +1842,7 @@ public class PurpurWorldConfig {
     public double horseMovementSpeedMax = 0.3375D;
     public int horseBreedingTicks = 6000;
     public boolean horseTakeDamageFromWater = false;
+    public boolean horseAlwaysDropExp = false;
     private void horseSettings() {
         horseRidableInWater = getBoolean("mobs.horse.ridable-in-water", horseRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1811,6 +1860,7 @@ public class PurpurWorldConfig {
         horseMovementSpeedMax = getDouble("mobs.horse.attributes.movement_speed.max", horseMovementSpeedMax);
         horseBreedingTicks = getInt("mobs.horse.breeding-delay-ticks", horseBreedingTicks);
         horseTakeDamageFromWater = getBoolean("mobs.horse.takes-damage-from-water", horseTakeDamageFromWater);
+        horseAlwaysDropExp = getBoolean("mobs.horse.always-drop-exp", horseAlwaysDropExp);
     }
 
     public boolean huskRidable = false;
@@ -1823,6 +1873,7 @@ public class PurpurWorldConfig {
     public double huskJockeyChance = 0.05D;
     public boolean huskJockeyTryExistingChickens = true;
     public boolean huskTakeDamageFromWater = false;
+    public boolean huskAlwaysDropExp = false;
     private void huskSettings() {
         huskRidable = getBoolean("mobs.husk.ridable", huskRidable);
         huskRidableInWater = getBoolean("mobs.husk.ridable-in-water", huskRidableInWater);
@@ -1839,6 +1890,7 @@ public class PurpurWorldConfig {
         huskJockeyChance = getDouble("mobs.husk.jockey.chance", huskJockeyChance);
         huskJockeyTryExistingChickens = getBoolean("mobs.husk.jockey.try-existing-chickens", huskJockeyTryExistingChickens);
         huskTakeDamageFromWater = getBoolean("mobs.husk.takes-damage-from-water", huskTakeDamageFromWater);
+        huskAlwaysDropExp = getBoolean("mobs.husk.always-drop-exp", huskAlwaysDropExp);
     }
 
     public boolean illusionerRidable = false;
@@ -1849,6 +1901,7 @@ public class PurpurWorldConfig {
     public double illusionerMaxHealth = 32.0D;
     public double illusionerScale = 1.0D;
     public boolean illusionerTakeDamageFromWater = false;
+    public boolean illusionerAlwaysDropExp = false;
     private void illusionerSettings() {
         illusionerRidable = getBoolean("mobs.illusioner.ridable", illusionerRidable);
         illusionerRidableInWater = getBoolean("mobs.illusioner.ridable-in-water", illusionerRidableInWater);
@@ -1867,6 +1920,7 @@ public class PurpurWorldConfig {
         illusionerMaxHealth = getDouble("mobs.illusioner.attributes.max_health", illusionerMaxHealth);
         illusionerScale = Mth.clamp(getDouble("mobs.illusioner.attributes.scale", illusionerScale), 0.0625D, 16.0D);
         illusionerTakeDamageFromWater = getBoolean("mobs.illusioner.takes-damage-from-water", illusionerTakeDamageFromWater);
+        illusionerAlwaysDropExp = getBoolean("mobs.illusioner.always-drop-exp", illusionerAlwaysDropExp);
     }
 
     public boolean ironGolemRidable = false;
@@ -1878,6 +1932,7 @@ public class PurpurWorldConfig {
     public boolean ironGolemTakeDamageFromWater = false;
     public boolean ironGolemPoppyCalm = false;
     public boolean ironGolemHealCalm = false;
+    public boolean ironGolemAlwaysDropExp = false;
     private void ironGolemSettings() {
         ironGolemRidable = getBoolean("mobs.iron_golem.ridable", ironGolemRidable);
         ironGolemRidableInWater = getBoolean("mobs.iron_golem.ridable-in-water", ironGolemRidableInWater);
@@ -1893,6 +1948,7 @@ public class PurpurWorldConfig {
         ironGolemTakeDamageFromWater = getBoolean("mobs.iron_golem.takes-damage-from-water", ironGolemTakeDamageFromWater);
         ironGolemPoppyCalm = getBoolean("mobs.iron_golem.poppy-calms-anger", ironGolemPoppyCalm);
         ironGolemHealCalm = getBoolean("mobs.iron_golem.healing-calms-anger", ironGolemHealCalm);
+        ironGolemAlwaysDropExp = getBoolean("mobs.iron_golem.always-drop-exp", ironGolemAlwaysDropExp);
     }
 
     public boolean llamaRidable = false;
@@ -1907,6 +1963,7 @@ public class PurpurWorldConfig {
     public int llamaBreedingTicks = 6000;
     public boolean llamaTakeDamageFromWater = false;
     public boolean llamaJoinCaravans = true;
+    public boolean llamaAlwaysDropExp = false;
     private void llamaSettings() {
         llamaRidable = getBoolean("mobs.llama.ridable", llamaRidable);
         llamaRidableInWater = getBoolean("mobs.llama.ridable-in-water", llamaRidableInWater);
@@ -1927,6 +1984,7 @@ public class PurpurWorldConfig {
         llamaBreedingTicks = getInt("mobs.llama.breeding-delay-ticks", llamaBreedingTicks);
         llamaTakeDamageFromWater = getBoolean("mobs.llama.takes-damage-from-water", llamaTakeDamageFromWater);
         llamaJoinCaravans = getBoolean("mobs.llama.join-caravans", llamaJoinCaravans);
+        llamaAlwaysDropExp = getBoolean("mobs.llama.always-drop-exp", llamaAlwaysDropExp);
     }
 
     public boolean magmaCubeRidable = false;
@@ -1937,6 +1995,7 @@ public class PurpurWorldConfig {
     public Map<Integer, Double> magmaCubeMaxHealthCache = new HashMap<>();
     public Map<Integer, Double> magmaCubeAttackDamageCache = new HashMap<>();
     public boolean magmaCubeTakeDamageFromWater = false;
+    public boolean magmaCubeAlwaysDropExp = false;
     private void magmaCubeSettings() {
         magmaCubeRidable = getBoolean("mobs.magma_cube.ridable", magmaCubeRidable);
         magmaCubeRidableInWater = getBoolean("mobs.magma_cube.ridable-in-water", magmaCubeRidableInWater);
@@ -1951,6 +2010,7 @@ public class PurpurWorldConfig {
         magmaCubeMaxHealthCache.clear();
         magmaCubeAttackDamageCache.clear();
         magmaCubeTakeDamageFromWater = getBoolean("mobs.magma_cube.takes-damage-from-water", magmaCubeTakeDamageFromWater);
+        magmaCubeAlwaysDropExp = getBoolean("mobs.magma_cube.always-drop-exp", magmaCubeAlwaysDropExp);
     }
 
     public boolean mooshroomRidable = false;
@@ -1960,6 +2020,7 @@ public class PurpurWorldConfig {
     public double mooshroomScale = 1.0D;
     public int mooshroomBreedingTicks = 6000;
     public boolean mooshroomTakeDamageFromWater = false;
+    public boolean mooshroomAlwaysDropExp = false;
     private void mooshroomSettings() {
         mooshroomRidable = getBoolean("mobs.mooshroom.ridable", mooshroomRidable);
         mooshroomRidableInWater = getBoolean("mobs.mooshroom.ridable-in-water", mooshroomRidableInWater);
@@ -1973,6 +2034,7 @@ public class PurpurWorldConfig {
         mooshroomScale = Mth.clamp(getDouble("mobs.mooshroom.attributes.scale", mooshroomScale), 0.0625D, 16.0D);
         mooshroomBreedingTicks = getInt("mobs.mooshroom.breeding-delay-ticks", mooshroomBreedingTicks);
         mooshroomTakeDamageFromWater = getBoolean("mobs.mooshroom.takes-damage-from-water", mooshroomTakeDamageFromWater);
+        mooshroomAlwaysDropExp = getBoolean("mobs.mooshroom.always-drop-exp", mooshroomAlwaysDropExp);
     }
 
     public boolean muleRidableInWater = false;
@@ -1984,6 +2046,7 @@ public class PurpurWorldConfig {
     public double muleMovementSpeedMax = 0.175D;
     public int muleBreedingTicks = 6000;
     public boolean muleTakeDamageFromWater = false;
+    public boolean muleAlwaysDropExp = false;
     private void muleSettings() {
         muleRidableInWater = getBoolean("mobs.mule.ridable-in-water", muleRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -2001,6 +2064,7 @@ public class PurpurWorldConfig {
         muleMovementSpeedMax = getDouble("mobs.mule.attributes.movement_speed.max", muleMovementSpeedMax);
         muleBreedingTicks = getInt("mobs.mule.breeding-delay-ticks", muleBreedingTicks);
         muleTakeDamageFromWater = getBoolean("mobs.mule.takes-damage-from-water", muleTakeDamageFromWater);
+        muleAlwaysDropExp = getBoolean("mobs.mule.always-drop-exp", muleAlwaysDropExp);
     }
 
     public boolean ocelotRidable = false;
@@ -2010,6 +2074,7 @@ public class PurpurWorldConfig {
     public double ocelotScale = 1.0D;
     public int ocelotBreedingTicks = 6000;
     public boolean ocelotTakeDamageFromWater = false;
+    public boolean ocelotAlwaysDropExp = false;
     private void ocelotSettings() {
         ocelotRidable = getBoolean("mobs.ocelot.ridable", ocelotRidable);
         ocelotRidableInWater = getBoolean("mobs.ocelot.ridable-in-water", ocelotRidableInWater);
@@ -2023,6 +2088,7 @@ public class PurpurWorldConfig {
         ocelotScale = Mth.clamp(getDouble("mobs.ocelot.attributes.scale", ocelotScale), 0.0625D, 16.0D);
         ocelotBreedingTicks = getInt("mobs.ocelot.breeding-delay-ticks", ocelotBreedingTicks);
         ocelotTakeDamageFromWater = getBoolean("mobs.ocelot.takes-damage-from-water", ocelotTakeDamageFromWater);
+        ocelotAlwaysDropExp = getBoolean("mobs.ocelot.always-drop-exp", ocelotAlwaysDropExp);
     }
 
     public boolean pandaRidable = false;
@@ -2032,6 +2098,7 @@ public class PurpurWorldConfig {
     public double pandaScale = 1.0D;
     public int pandaBreedingTicks = 6000;
     public boolean pandaTakeDamageFromWater = false;
+    public boolean pandaAlwaysDropExp = false;
     private void pandaSettings() {
         pandaRidable = getBoolean("mobs.panda.ridable", pandaRidable);
         pandaRidableInWater = getBoolean("mobs.panda.ridable-in-water", pandaRidableInWater);
@@ -2045,6 +2112,7 @@ public class PurpurWorldConfig {
         pandaScale = Mth.clamp(getDouble("mobs.panda.attributes.scale", pandaScale), 0.0625D, 16.0D);
         pandaBreedingTicks = getInt("mobs.panda.breeding-delay-ticks", pandaBreedingTicks);
         pandaTakeDamageFromWater = getBoolean("mobs.panda.takes-damage-from-water", pandaTakeDamageFromWater);
+        pandaAlwaysDropExp = getBoolean("mobs.panda.always-drop-exp", pandaAlwaysDropExp);
     }
 
     public boolean parrotRidable = false;
@@ -2055,6 +2123,7 @@ public class PurpurWorldConfig {
     public double parrotScale = 1.0D;
     public boolean parrotTakeDamageFromWater = false;
     public boolean parrotBreedable = false;
+    public boolean parrotAlwaysDropExp = false;
     private void parrotSettings() {
         parrotRidable = getBoolean("mobs.parrot.ridable", parrotRidable);
         parrotRidableInWater = getBoolean("mobs.parrot.ridable-in-water", parrotRidableInWater);
@@ -2069,6 +2138,7 @@ public class PurpurWorldConfig {
         parrotScale = Mth.clamp(getDouble("mobs.parrot.attributes.scale", parrotScale), 0.0625D, 16.0D);
         parrotTakeDamageFromWater = getBoolean("mobs.parrot.takes-damage-from-water", parrotTakeDamageFromWater);
         parrotBreedable = getBoolean("mobs.parrot.can-breed", parrotBreedable);
+        parrotAlwaysDropExp = getBoolean("mobs.parrot.always-drop-exp", parrotAlwaysDropExp);
     }
 
     public boolean phantomRidable = false;
@@ -2096,6 +2166,7 @@ public class PurpurWorldConfig {
     public boolean phantomBurnInDaylight = true;
     public boolean phantomFlamesOnSwoop = false;
     public boolean phantomTakeDamageFromWater = false;
+    public boolean phantomAlwaysDropExp = false;
     private void phantomSettings() {
         phantomRidable = getBoolean("mobs.phantom.ridable", phantomRidable);
         phantomRidableInWater = getBoolean("mobs.phantom.ridable-in-water", phantomRidableInWater);
@@ -2131,6 +2202,7 @@ public class PurpurWorldConfig {
         phantomIgnorePlayersWithTorch = getBoolean("mobs.phantom.ignore-players-with-torch", phantomIgnorePlayersWithTorch);
         phantomFlamesOnSwoop = getBoolean("mobs.phantom.flames-on-swoop", phantomFlamesOnSwoop);
         phantomTakeDamageFromWater = getBoolean("mobs.phantom.takes-damage-from-water", phantomTakeDamageFromWater);
+        phantomAlwaysDropExp = getBoolean("mobs.phantom.always-drop-exp", phantomAlwaysDropExp);
     }
 
     public boolean pigRidable = false;
@@ -2141,6 +2213,7 @@ public class PurpurWorldConfig {
     public boolean pigGiveSaddleBack = false;
     public int pigBreedingTicks = 6000;
     public boolean pigTakeDamageFromWater = false;
+    public boolean pigAlwaysDropExp = false;
     private void pigSettings() {
         pigRidable = getBoolean("mobs.pig.ridable", pigRidable);
         pigRidableInWater = getBoolean("mobs.pig.ridable-in-water", pigRidableInWater);
@@ -2155,6 +2228,7 @@ public class PurpurWorldConfig {
         pigGiveSaddleBack = getBoolean("mobs.pig.give-saddle-back", pigGiveSaddleBack);
         pigBreedingTicks = getInt("mobs.pig.breeding-delay-ticks", pigBreedingTicks);
         pigTakeDamageFromWater = getBoolean("mobs.pig.takes-damage-from-water", pigTakeDamageFromWater);
+        pigAlwaysDropExp = getBoolean("mobs.pig.always-drop-exp", pigAlwaysDropExp);
     }
 
     public boolean piglinRidable = false;
@@ -2165,6 +2239,7 @@ public class PurpurWorldConfig {
     public boolean piglinBypassMobGriefing = false;
     public boolean piglinTakeDamageFromWater = false;
     public int piglinPortalSpawnModifier = 2000;
+    public boolean piglinAlwaysDropExp = false;
     private void piglinSettings() {
         piglinRidable = getBoolean("mobs.piglin.ridable", piglinRidable);
         piglinRidableInWater = getBoolean("mobs.piglin.ridable-in-water", piglinRidableInWater);
@@ -2179,6 +2254,7 @@ public class PurpurWorldConfig {
         piglinBypassMobGriefing = getBoolean("mobs.piglin.bypass-mob-griefing", piglinBypassMobGriefing);
         piglinTakeDamageFromWater = getBoolean("mobs.piglin.takes-damage-from-water", piglinTakeDamageFromWater);
         piglinPortalSpawnModifier = getInt("mobs.piglin.portal-spawn-modifier", piglinPortalSpawnModifier);
+        piglinAlwaysDropExp = getBoolean("mobs.piglin.always-drop-exp", piglinAlwaysDropExp);
     }
 
     public boolean piglinBruteRidable = false;
@@ -2187,6 +2263,7 @@ public class PurpurWorldConfig {
     public double piglinBruteMaxHealth = 50.0D;
     public double piglinBruteScale = 1.0D;
     public boolean piglinBruteTakeDamageFromWater = false;
+    public boolean piglinBruteAlwaysDropExp = false;
     private void piglinBruteSettings() {
         piglinBruteRidable = getBoolean("mobs.piglin_brute.ridable", piglinBruteRidable);
         piglinBruteRidableInWater = getBoolean("mobs.piglin_brute.ridable-in-water", piglinBruteRidableInWater);
@@ -2199,6 +2276,7 @@ public class PurpurWorldConfig {
         piglinBruteMaxHealth = getDouble("mobs.piglin_brute.attributes.max_health", piglinBruteMaxHealth);
         piglinBruteScale = Mth.clamp(getDouble("mobs.piglin_brute.attributes.scale", piglinBruteScale), 0.0625D, 16.0D);
         piglinBruteTakeDamageFromWater = getBoolean("mobs.piglin_brute.takes-damage-from-water", piglinBruteTakeDamageFromWater);
+        piglinBruteAlwaysDropExp = getBoolean("mobs.piglin_brute.always-drop-exp", piglinBruteAlwaysDropExp);
     }
 
     public boolean pillagerRidable = false;
@@ -2208,6 +2286,7 @@ public class PurpurWorldConfig {
     public double pillagerScale = 1.0D;
     public boolean pillagerBypassMobGriefing = false;
     public boolean pillagerTakeDamageFromWater = false;
+    public boolean pillagerAlwaysDropExp = false;
     private void pillagerSettings() {
         pillagerRidable = getBoolean("mobs.pillager.ridable", pillagerRidable);
         pillagerRidableInWater = getBoolean("mobs.pillager.ridable-in-water", pillagerRidableInWater);
@@ -2221,6 +2300,7 @@ public class PurpurWorldConfig {
         pillagerScale = Mth.clamp(getDouble("mobs.pillager.attributes.scale", pillagerScale), 0.0625D, 16.0D);
         pillagerBypassMobGriefing = getBoolean("mobs.pillager.bypass-mob-griefing", pillagerBypassMobGriefing);
         pillagerTakeDamageFromWater = getBoolean("mobs.pillager.takes-damage-from-water", pillagerTakeDamageFromWater);
+        pillagerAlwaysDropExp = getBoolean("mobs.pillager.always-drop-exp", pillagerAlwaysDropExp);
     }
 
     public boolean polarBearRidable = false;
@@ -2232,6 +2312,7 @@ public class PurpurWorldConfig {
     public Item polarBearBreedableItem = null;
     public int polarBearBreedingTicks = 6000;
     public boolean polarBearTakeDamageFromWater = false;
+    public boolean polarBearAlwaysDropExp = false;
     private void polarBearSettings() {
         polarBearRidable = getBoolean("mobs.polar_bear.ridable", polarBearRidable);
         polarBearRidableInWater = getBoolean("mobs.polar_bear.ridable-in-water", polarBearRidableInWater);
@@ -2248,6 +2329,7 @@ public class PurpurWorldConfig {
         if (item != Items.AIR) polarBearBreedableItem = item;
         polarBearBreedingTicks = getInt("mobs.polar_bear.breeding-delay-ticks", polarBearBreedingTicks);
         polarBearTakeDamageFromWater = getBoolean("mobs.polar_bear.takes-damage-from-water", polarBearTakeDamageFromWater);
+        polarBearAlwaysDropExp = getBoolean("mobs.polar_bear.always-drop-exp", polarBearAlwaysDropExp);
     }
 
     public boolean pufferfishRidable = false;
@@ -2255,6 +2337,7 @@ public class PurpurWorldConfig {
     public double pufferfishMaxHealth = 3.0D;
     public double pufferfishScale = 1.0D;
     public boolean pufferfishTakeDamageFromWater = false;
+    public boolean pufferfishAlwaysDropExp = false;
     private void pufferfishSettings() {
         pufferfishRidable = getBoolean("mobs.pufferfish.ridable", pufferfishRidable);
         pufferfishControllable = getBoolean("mobs.pufferfish.controllable", pufferfishControllable);
@@ -2266,6 +2349,7 @@ public class PurpurWorldConfig {
         pufferfishMaxHealth = getDouble("mobs.pufferfish.attributes.max_health", pufferfishMaxHealth);
         pufferfishScale = Mth.clamp(getDouble("mobs.pufferfish.attributes.scale", pufferfishScale), 0.0625D, 16.0D);
         pufferfishTakeDamageFromWater = getBoolean("mobs.pufferfish.takes-damage-from-water", pufferfishTakeDamageFromWater);
+        pufferfishAlwaysDropExp = getBoolean("mobs.pufferfish.always-drop-exp", pufferfishAlwaysDropExp);
     }
 
     public boolean rabbitRidable = false;
@@ -2278,6 +2362,7 @@ public class PurpurWorldConfig {
     public int rabbitBreedingTicks = 6000;
     public boolean rabbitBypassMobGriefing = false;
     public boolean rabbitTakeDamageFromWater = false;
+    public boolean rabbitAlwaysDropExp = false;
     private void rabbitSettings() {
         rabbitRidable = getBoolean("mobs.rabbit.ridable", rabbitRidable);
         rabbitRidableInWater = getBoolean("mobs.rabbit.ridable-in-water", rabbitRidableInWater);
@@ -2294,6 +2379,7 @@ public class PurpurWorldConfig {
         rabbitBreedingTicks = getInt("mobs.rabbit.breeding-delay-ticks", rabbitBreedingTicks);
         rabbitBypassMobGriefing = getBoolean("mobs.rabbit.bypass-mob-griefing", rabbitBypassMobGriefing);
         rabbitTakeDamageFromWater = getBoolean("mobs.rabbit.takes-damage-from-water", rabbitTakeDamageFromWater);
+        rabbitAlwaysDropExp = getBoolean("mobs.rabbit.always-drop-exp", rabbitAlwaysDropExp);
     }
 
     public boolean ravagerRidable = false;
@@ -2304,6 +2390,7 @@ public class PurpurWorldConfig {
     public boolean ravagerBypassMobGriefing = false;
     public boolean ravagerTakeDamageFromWater = false;
     public List<Block> ravagerGriefableBlocks = new ArrayList<>();
+    public boolean ravagerAlwaysDropExp = false;
     private void ravagerSettings() {
         ravagerRidable = getBoolean("mobs.ravager.ridable", ravagerRidable);
         ravagerRidableInWater = getBoolean("mobs.ravager.ridable-in-water", ravagerRidableInWater);
@@ -2334,6 +2421,7 @@ public class PurpurWorldConfig {
                 ravagerGriefableBlocks.add(block);
             }
         });
+        ravagerAlwaysDropExp = getBoolean("mobs.ravager.always-drop-exp", ravagerAlwaysDropExp);
     }
 
     public boolean salmonRidable = false;
@@ -2341,6 +2429,7 @@ public class PurpurWorldConfig {
     public double salmonMaxHealth = 3.0D;
     public double salmonScale = 1.0D;
     public boolean salmonTakeDamageFromWater = false;
+    public boolean salmonAlwaysDropExp = false;
     private void salmonSettings() {
         salmonRidable = getBoolean("mobs.salmon.ridable", salmonRidable);
         salmonControllable = getBoolean("mobs.salmon.controllable", salmonControllable);
@@ -2352,6 +2441,7 @@ public class PurpurWorldConfig {
         salmonMaxHealth = getDouble("mobs.salmon.attributes.max_health", salmonMaxHealth);
         salmonScale = Mth.clamp(getDouble("mobs.salmon.attributes.scale", salmonScale), 0.0625D, 16.0D);
         salmonTakeDamageFromWater = getBoolean("mobs.salmon.takes-damage-from-water", salmonTakeDamageFromWater);
+        salmonAlwaysDropExp = getBoolean("mobs.salmon.always-drop-exp", salmonAlwaysDropExp);
     }
 
     public boolean sheepRidable = false;
@@ -2362,6 +2452,7 @@ public class PurpurWorldConfig {
     public int sheepBreedingTicks = 6000;
     public boolean sheepBypassMobGriefing = false;
     public boolean sheepTakeDamageFromWater = false;
+    public boolean sheepAlwaysDropExp = false;
     private void sheepSettings() {
         sheepRidable = getBoolean("mobs.sheep.ridable", sheepRidable);
         sheepRidableInWater = getBoolean("mobs.sheep.ridable-in-water", sheepRidableInWater);
@@ -2376,6 +2467,7 @@ public class PurpurWorldConfig {
         sheepBreedingTicks = getInt("mobs.sheep.breeding-delay-ticks", sheepBreedingTicks);
         sheepBypassMobGriefing = getBoolean("mobs.sheep.bypass-mob-griefing", sheepBypassMobGriefing);
         sheepTakeDamageFromWater = getBoolean("mobs.sheep.takes-damage-from-water", sheepTakeDamageFromWater);
+        sheepAlwaysDropExp = getBoolean("mobs.sheep.always-drop-exp", sheepAlwaysDropExp);
     }
 
     public boolean shulkerRidable = false;
@@ -2390,6 +2482,7 @@ public class PurpurWorldConfig {
     public String shulkerSpawnFromBulletNearbyEquation = "(nearby - 1) / 5.0";
     public boolean shulkerSpawnFromBulletRandomColor = false;
     public boolean shulkerChangeColorWithDye = false;
+    public boolean shulkerAlwaysDropExp = false;
     private void shulkerSettings() {
         shulkerRidable = getBoolean("mobs.shulker.ridable", shulkerRidable);
         shulkerRidableInWater = getBoolean("mobs.shulker.ridable-in-water", shulkerRidableInWater);
@@ -2408,6 +2501,7 @@ public class PurpurWorldConfig {
         shulkerSpawnFromBulletNearbyEquation = getString("mobs.shulker.spawn-from-bullet.nearby-equation", shulkerSpawnFromBulletNearbyEquation);
         shulkerSpawnFromBulletRandomColor = getBoolean("mobs.shulker.spawn-from-bullet.random-color", shulkerSpawnFromBulletRandomColor);
         shulkerChangeColorWithDye = getBoolean("mobs.shulker.change-color-with-dye", shulkerChangeColorWithDye);
+        shulkerAlwaysDropExp = getBoolean("mobs.shulker.always-drop-exp", shulkerAlwaysDropExp);
     }
 
     public boolean silverfishRidable = false;
@@ -2419,6 +2513,7 @@ public class PurpurWorldConfig {
     public double silverfishAttackDamage = 1.0D;
     public boolean silverfishBypassMobGriefing = false;
     public boolean silverfishTakeDamageFromWater = false;
+    public boolean silverfishAlwaysDropExp = false;
     private void silverfishSettings() {
         silverfishRidable = getBoolean("mobs.silverfish.ridable", silverfishRidable);
         silverfishRidableInWater = getBoolean("mobs.silverfish.ridable-in-water", silverfishRidableInWater);
@@ -2434,6 +2529,7 @@ public class PurpurWorldConfig {
         silverfishAttackDamage = getDouble("mobs.silverfish.attributes.attack_damage", silverfishAttackDamage);
         silverfishBypassMobGriefing = getBoolean("mobs.silverfish.bypass-mob-griefing", silverfishBypassMobGriefing);
         silverfishTakeDamageFromWater = getBoolean("mobs.silverfish.takes-damage-from-water", silverfishTakeDamageFromWater);
+        silverfishAlwaysDropExp = getBoolean("mobs.silverfish.always-drop-exp", silverfishAlwaysDropExp);
     }
 
     public boolean skeletonRidable = false;
@@ -2442,6 +2538,7 @@ public class PurpurWorldConfig {
     public double skeletonMaxHealth = 20.0D;
     public double skeletonScale = 1.0D;
     public boolean skeletonTakeDamageFromWater = false;
+    public boolean skeletonAlwaysDropExp = false;
     private void skeletonSettings() {
         skeletonRidable = getBoolean("mobs.skeleton.ridable", skeletonRidable);
         skeletonRidableInWater = getBoolean("mobs.skeleton.ridable-in-water", skeletonRidableInWater);
@@ -2454,6 +2551,7 @@ public class PurpurWorldConfig {
         skeletonMaxHealth = getDouble("mobs.skeleton.attributes.max_health", skeletonMaxHealth);
         skeletonScale = Mth.clamp(getDouble("mobs.skeleton.attributes.scale", skeletonScale), 0.0625D, 16.0D);
         skeletonTakeDamageFromWater = getBoolean("mobs.skeleton.takes-damage-from-water", skeletonTakeDamageFromWater);
+        skeletonAlwaysDropExp = getBoolean("mobs.skeleton.always-drop-exp", skeletonAlwaysDropExp);
     }
 
     public boolean skeletonHorseRidable = false;
@@ -2466,6 +2564,7 @@ public class PurpurWorldConfig {
     public double skeletonHorseMovementSpeedMin = 0.2D;
     public double skeletonHorseMovementSpeedMax = 0.2D;
     public boolean skeletonHorseTakeDamageFromWater = false;
+    public boolean skeletonHorseAlwaysDropExp = false;
     private void skeletonHorseSettings() {
         skeletonHorseRidable = getBoolean("mobs.skeleton_horse.ridable", skeletonHorseRidable);
         skeletonHorseRidableInWater = getBoolean("mobs.skeleton_horse.ridable-in-water", skeletonHorseRidableInWater);
@@ -2483,6 +2582,7 @@ public class PurpurWorldConfig {
         skeletonHorseMovementSpeedMin = getDouble("mobs.skeleton_horse.attributes.movement_speed.min", skeletonHorseMovementSpeedMin);
         skeletonHorseMovementSpeedMax = getDouble("mobs.skeleton_horse.attributes.movement_speed.max", skeletonHorseMovementSpeedMax);
         skeletonHorseTakeDamageFromWater = getBoolean("mobs.skeleton_horse.takes-damage-from-water", skeletonHorseTakeDamageFromWater);
+        skeletonHorseAlwaysDropExp = getBoolean("mobs.skeleton_horse.always-drop-exp", skeletonHorseAlwaysDropExp);
     }
 
     public boolean slimeRidable = false;
@@ -2493,6 +2593,7 @@ public class PurpurWorldConfig {
     public Map<Integer, Double> slimeMaxHealthCache = new HashMap<>();
     public Map<Integer, Double> slimeAttackDamageCache = new HashMap<>();
     public boolean slimeTakeDamageFromWater = false;
+    public boolean slimeAlwaysDropExp = false;
     private void slimeSettings() {
         slimeRidable = getBoolean("mobs.slime.ridable", slimeRidable);
         slimeRidableInWater = getBoolean("mobs.slime.ridable-in-water", slimeRidableInWater);
@@ -2507,6 +2608,7 @@ public class PurpurWorldConfig {
         slimeMaxHealthCache.clear();
         slimeAttackDamageCache.clear();
         slimeTakeDamageFromWater = getBoolean("mobs.slime.takes-damage-from-water", slimeTakeDamageFromWater);
+        slimeAlwaysDropExp = getBoolean("mobs.slime.always-drop-exp", slimeAlwaysDropExp);
     }
 
     public boolean snowGolemRidable = false;
@@ -2522,6 +2624,7 @@ public class PurpurWorldConfig {
     public double snowGolemAttackDistance = 1.25D;
     public boolean snowGolemBypassMobGriefing = false;
     public boolean snowGolemTakeDamageFromWater = true;
+    public boolean snowGolemAlwaysDropExp = false;
     private void snowGolemSettings() {
         snowGolemRidable = getBoolean("mobs.snow_golem.ridable", snowGolemRidable);
         snowGolemRidableInWater = getBoolean("mobs.snow_golem.ridable-in-water", snowGolemRidableInWater);
@@ -2541,6 +2644,7 @@ public class PurpurWorldConfig {
         snowGolemAttackDistance = getDouble("mobs.snow_golem.attack-distance", snowGolemAttackDistance);
         snowGolemBypassMobGriefing = getBoolean("mobs.snow_golem.bypass-mob-griefing", snowGolemBypassMobGriefing);
         snowGolemTakeDamageFromWater = getBoolean("mobs.snow_golem.takes-damage-from-water", snowGolemTakeDamageFromWater);
+        snowGolemAlwaysDropExp = getBoolean("mobs.snow_golem.always-drop-exp", snowGolemAlwaysDropExp);
     }
 
     public boolean snifferRidable = false;
@@ -2566,6 +2670,7 @@ public class PurpurWorldConfig {
     public double squidOffsetWaterCheck = 0.0D;
     public boolean squidsCanFly = false;
     public boolean squidTakeDamageFromWater = false;
+    public boolean squidAlwaysDropExp = false;
     private void squidSettings() {
         squidRidable = getBoolean("mobs.squid.ridable", squidRidable);
         squidControllable = getBoolean("mobs.squid.controllable", squidControllable);
@@ -2580,6 +2685,7 @@ public class PurpurWorldConfig {
         squidOffsetWaterCheck = getDouble("mobs.squid.water-offset-check", squidOffsetWaterCheck);
         squidsCanFly = getBoolean("mobs.squid.can-fly", squidsCanFly);
         squidTakeDamageFromWater = getBoolean("mobs.squid.takes-damage-from-water", squidTakeDamageFromWater);
+        squidAlwaysDropExp = getBoolean("mobs.squid.always-drop-exp", squidAlwaysDropExp);
     }
 
     public boolean spiderRidable = false;
@@ -2588,6 +2694,7 @@ public class PurpurWorldConfig {
     public double spiderMaxHealth = 16.0D;
     public double spiderScale = 1.0D;
     public boolean spiderTakeDamageFromWater = false;
+    public boolean spiderAlwaysDropExp = false;
     private void spiderSettings() {
         spiderRidable = getBoolean("mobs.spider.ridable", spiderRidable);
         spiderRidableInWater = getBoolean("mobs.spider.ridable-in-water", spiderRidableInWater);
@@ -2600,6 +2707,7 @@ public class PurpurWorldConfig {
         spiderMaxHealth = getDouble("mobs.spider.attributes.max_health", spiderMaxHealth);
         spiderScale = Mth.clamp(getDouble("mobs.spider.attributes.scale", spiderScale), 0.0625D, 16.0D);
         spiderTakeDamageFromWater = getBoolean("mobs.spider.takes-damage-from-water", spiderTakeDamageFromWater);
+        spiderAlwaysDropExp = getBoolean("mobs.spider.always-drop-exp", spiderAlwaysDropExp);
     }
 
     public boolean strayRidable = false;
@@ -2608,6 +2716,7 @@ public class PurpurWorldConfig {
     public double strayMaxHealth = 20.0D;
     public double strayScale = 1.0D;
     public boolean strayTakeDamageFromWater = false;
+    public boolean strayAlwaysDropExp = false;
     private void straySettings() {
         strayRidable = getBoolean("mobs.stray.ridable", strayRidable);
         strayRidableInWater = getBoolean("mobs.stray.ridable-in-water", strayRidableInWater);
@@ -2620,6 +2729,7 @@ public class PurpurWorldConfig {
         strayMaxHealth = getDouble("mobs.stray.attributes.max_health", strayMaxHealth);
         strayScale = Mth.clamp(getDouble("mobs.stray.attributes.scale", strayScale), 0.0625D, 16.0D);
         strayTakeDamageFromWater = getBoolean("mobs.stray.takes-damage-from-water", strayTakeDamageFromWater);
+        strayAlwaysDropExp = getBoolean("mobs.stray.always-drop-exp", strayAlwaysDropExp);
     }
 
     public boolean striderRidable = false;
@@ -2630,6 +2740,7 @@ public class PurpurWorldConfig {
     public int striderBreedingTicks = 6000;
     public boolean striderGiveSaddleBack = false;
     public boolean striderTakeDamageFromWater = true;
+    public boolean striderAlwaysDropExp = false;
     private void striderSettings() {
         striderRidable = getBoolean("mobs.strider.ridable", striderRidable);
         striderRidableInWater = getBoolean("mobs.strider.ridable-in-water", striderRidableInWater);
@@ -2644,6 +2755,7 @@ public class PurpurWorldConfig {
         striderBreedingTicks = getInt("mobs.strider.breeding-delay-ticks", striderBreedingTicks);
         striderGiveSaddleBack = getBoolean("mobs.strider.give-saddle-back", striderGiveSaddleBack);
         striderTakeDamageFromWater = getBoolean("mobs.strider.takes-damage-from-water", striderTakeDamageFromWater);
+        striderAlwaysDropExp = getBoolean("mobs.strider.always-drop-exp", striderAlwaysDropExp);
     }
 
     public boolean tadpoleRidable = false;
@@ -2666,6 +2778,7 @@ public class PurpurWorldConfig {
     public double traderLlamaMovementSpeedMax = 0.175D;
     public int traderLlamaBreedingTicks = 6000;
     public boolean traderLlamaTakeDamageFromWater = false;
+    public boolean traderLlamaAlwaysDropExp = false;
     private void traderLlamaSettings() {
         traderLlamaRidable = getBoolean("mobs.trader_llama.ridable", traderLlamaRidable);
         traderLlamaRidableInWater = getBoolean("mobs.trader_llama.ridable-in-water", traderLlamaRidableInWater);
@@ -2685,6 +2798,7 @@ public class PurpurWorldConfig {
         traderLlamaMovementSpeedMax = getDouble("mobs.trader_llama.attributes.movement_speed.max", traderLlamaMovementSpeedMax);
         traderLlamaBreedingTicks = getInt("mobs.trader_llama.breeding-delay-ticks", traderLlamaBreedingTicks);
         traderLlamaTakeDamageFromWater = getBoolean("mobs.trader_llama.takes-damage-from-water", traderLlamaTakeDamageFromWater);
+        traderLlamaAlwaysDropExp = getBoolean("mobs.trader_llama.always-drop-exp", traderLlamaAlwaysDropExp);
     }
 
     public boolean tropicalFishRidable = false;
@@ -2692,6 +2806,7 @@ public class PurpurWorldConfig {
     public double tropicalFishMaxHealth = 3.0D;
     public double tropicalFishScale = 1.0D;
     public boolean tropicalFishTakeDamageFromWater = false;
+    public boolean tropicalFishAlwaysDropExp = false;
     private void tropicalFishSettings() {
         tropicalFishRidable = getBoolean("mobs.tropical_fish.ridable", tropicalFishRidable);
         tropicalFishControllable = getBoolean("mobs.tropical_fish.controllable", tropicalFishControllable);
@@ -2703,6 +2818,7 @@ public class PurpurWorldConfig {
         tropicalFishMaxHealth = getDouble("mobs.tropical_fish.attributes.max_health", tropicalFishMaxHealth);
         tropicalFishScale = Mth.clamp(getDouble("mobs.tropical_fish.attributes.scale", tropicalFishScale), 0.0625D, 16.0D);
         tropicalFishTakeDamageFromWater = getBoolean("mobs.tropical_fish.takes-damage-from-water", tropicalFishTakeDamageFromWater);
+        tropicalFishAlwaysDropExp = getBoolean("mobs.tropical_fish.always-drop-exp", tropicalFishAlwaysDropExp);
     }
 
     public boolean turtleRidable = false;
@@ -2712,6 +2828,7 @@ public class PurpurWorldConfig {
     public double turtleScale = 1.0D;
     public int turtleBreedingTicks = 6000;
     public boolean turtleTakeDamageFromWater = false;
+    public boolean turtleAlwaysDropExp = false;
     private void turtleSettings() {
         turtleRidable = getBoolean("mobs.turtle.ridable", turtleRidable);
         turtleRidableInWater = getBoolean("mobs.turtle.ridable-in-water", turtleRidableInWater);
@@ -2725,6 +2842,7 @@ public class PurpurWorldConfig {
         turtleScale = Mth.clamp(getDouble("mobs.turtle.attributes.scale", turtleScale), 0.0625D, 16.0D);
         turtleBreedingTicks = getInt("mobs.turtle.breeding-delay-ticks", turtleBreedingTicks);
         turtleTakeDamageFromWater = getBoolean("mobs.turtle.takes-damage-from-water", turtleTakeDamageFromWater);
+        turtleAlwaysDropExp = getBoolean("mobs.turtle.always-drop-exp", turtleAlwaysDropExp);
     }
 
     public boolean vexRidable = false;
@@ -2734,6 +2852,7 @@ public class PurpurWorldConfig {
     public double vexMaxHealth = 14.0D;
     public double vexScale = 1.0D;
     public boolean vexTakeDamageFromWater = false;
+    public boolean vexAlwaysDropExp = false;
     private void vexSettings() {
         vexRidable = getBoolean("mobs.vex.ridable", vexRidable);
         vexRidableInWater = getBoolean("mobs.vex.ridable-in-water", vexRidableInWater);
@@ -2747,6 +2866,7 @@ public class PurpurWorldConfig {
         vexMaxHealth = getDouble("mobs.vex.attributes.max_health", vexMaxHealth);
         vexScale = Mth.clamp(getDouble("mobs.vex.attributes.scale", vexScale), 0.0625D, 16.0D);
         vexTakeDamageFromWater = getBoolean("mobs.vex.takes-damage-from-water", vexTakeDamageFromWater);
+        vexAlwaysDropExp = getBoolean("mobs.vex.always-drop-exp", vexAlwaysDropExp);
     }
 
     public boolean villagerRidable = false;
@@ -2764,6 +2884,7 @@ public class PurpurWorldConfig {
     public boolean villagerBypassMobGriefing = false;
     public boolean villagerTakeDamageFromWater = false;
     public boolean villagerAllowTrading = true;
+    public boolean villagerAlwaysDropExp = false;
     private void villagerSettings() {
         villagerRidable = getBoolean("mobs.villager.ridable", villagerRidable);
         villagerRidableInWater = getBoolean("mobs.villager.ridable-in-water", villagerRidableInWater);
@@ -2785,6 +2906,7 @@ public class PurpurWorldConfig {
         villagerBypassMobGriefing = getBoolean("mobs.villager.bypass-mob-griefing", villagerBypassMobGriefing);
         villagerTakeDamageFromWater = getBoolean("mobs.villager.takes-damage-from-water", villagerTakeDamageFromWater);
         villagerAllowTrading = getBoolean("mobs.villager.allow-trading", villagerAllowTrading);
+        villagerAlwaysDropExp = getBoolean("mobs.villager.always-drop-exp", villagerAlwaysDropExp);
     }
 
     public boolean vindicatorRidable = false;
@@ -2794,6 +2916,7 @@ public class PurpurWorldConfig {
     public double vindicatorScale = 1.0D;
     public double vindicatorJohnnySpawnChance = 0D;
     public boolean vindicatorTakeDamageFromWater = false;
+    public boolean vindicatorAlwaysDropExp = false;
     private void vindicatorSettings() {
         vindicatorRidable = getBoolean("mobs.vindicator.ridable", vindicatorRidable);
         vindicatorRidableInWater = getBoolean("mobs.vindicator.ridable-in-water", vindicatorRidableInWater);
@@ -2807,6 +2930,7 @@ public class PurpurWorldConfig {
         vindicatorScale = Mth.clamp(getDouble("mobs.vindicator.attributes.scale", vindicatorScale), 0.0625D, 16.0D);
         vindicatorJohnnySpawnChance = getDouble("mobs.vindicator.johnny.spawn-chance", vindicatorJohnnySpawnChance);
         vindicatorTakeDamageFromWater = getBoolean("mobs.vindicator.takes-damage-from-water", vindicatorTakeDamageFromWater);
+        vindicatorAlwaysDropExp = getBoolean("mobs.vindicator.always-drop-exp", vindicatorAlwaysDropExp);
     }
 
     public boolean wanderingTraderRidable = false;
@@ -2819,6 +2943,7 @@ public class PurpurWorldConfig {
     public boolean wanderingTraderCanBeLeashed = false;
     public boolean wanderingTraderTakeDamageFromWater = false;
     public boolean wanderingTraderAllowTrading = true;
+    public boolean wanderingTraderAlwaysDropExp = false;
     private void wanderingTraderSettings() {
         wanderingTraderRidable = getBoolean("mobs.wandering_trader.ridable", wanderingTraderRidable);
         wanderingTraderRidableInWater = getBoolean("mobs.wandering_trader.ridable-in-water", wanderingTraderRidableInWater);
@@ -2835,6 +2960,7 @@ public class PurpurWorldConfig {
         wanderingTraderCanBeLeashed = getBoolean("mobs.wandering_trader.can-be-leashed", wanderingTraderCanBeLeashed);
         wanderingTraderTakeDamageFromWater = getBoolean("mobs.wandering_trader.takes-damage-from-water", wanderingTraderTakeDamageFromWater);
         wanderingTraderAllowTrading = getBoolean("mobs.wandering_trader.allow-trading", wanderingTraderAllowTrading);
+        wanderingTraderAlwaysDropExp = getBoolean("mobs.wandering_trader.always-drop-exp", wanderingTraderAlwaysDropExp);
     }
 
     public boolean wardenRidable = false;
@@ -2852,6 +2978,7 @@ public class PurpurWorldConfig {
     public double witchMaxHealth = 26.0D;
     public double witchScale = 1.0D;
     public boolean witchTakeDamageFromWater = false;
+    public boolean witchAlwaysDropExp = false;
     private void witchSettings() {
         witchRidable = getBoolean("mobs.witch.ridable", witchRidable);
         witchRidableInWater = getBoolean("mobs.witch.ridable-in-water", witchRidableInWater);
@@ -2864,6 +2991,7 @@ public class PurpurWorldConfig {
         witchMaxHealth = getDouble("mobs.witch.attributes.max_health", witchMaxHealth);
         witchScale = Mth.clamp(getDouble("mobs.witch.attributes.scale", witchScale), 0.0625D, 16.0D);
         witchTakeDamageFromWater = getBoolean("mobs.witch.takes-damage-from-water", witchTakeDamageFromWater);
+        witchAlwaysDropExp = getBoolean("mobs.witch.always-drop-exp", witchAlwaysDropExp);
     }
 
     public boolean witherRidable = false;
@@ -2879,6 +3007,7 @@ public class PurpurWorldConfig {
     public boolean witherCanRideVehicles = false;
     public float witherExplosionRadius = 1.0F;
     public boolean witherPlaySpawnSound = true;
+    public boolean witherAlwaysDropExp = false;
     private void witherSettings() {
         witherRidable = getBoolean("mobs.wither.ridable", witherRidable);
         witherRidableInWater = getBoolean("mobs.wither.ridable-in-water", witherRidableInWater);
@@ -2902,6 +3031,7 @@ public class PurpurWorldConfig {
         witherCanRideVehicles = getBoolean("mobs.wither.can-ride-vehicles", witherCanRideVehicles);
         witherExplosionRadius = (float) getDouble("mobs.wither.explosion-radius", witherExplosionRadius);
         witherPlaySpawnSound = getBoolean("mobs.wither.play-spawn-sound", witherPlaySpawnSound);
+        witherAlwaysDropExp = getBoolean("mobs.wither.always-drop-exp", witherAlwaysDropExp);
     }
 
     public boolean witherSkeletonRidable = false;
@@ -2910,6 +3040,7 @@ public class PurpurWorldConfig {
     public double witherSkeletonMaxHealth = 20.0D;
     public double witherSkeletonScale = 1.0D;
     public boolean witherSkeletonTakeDamageFromWater = false;
+    public boolean witherSkeletonAlwaysDropExp = false;
     private void witherSkeletonSettings() {
         witherSkeletonRidable = getBoolean("mobs.wither_skeleton.ridable", witherSkeletonRidable);
         witherSkeletonRidableInWater = getBoolean("mobs.wither_skeleton.ridable-in-water", witherSkeletonRidableInWater);
@@ -2922,6 +3053,7 @@ public class PurpurWorldConfig {
         witherSkeletonMaxHealth = getDouble("mobs.wither_skeleton.attributes.max_health", witherSkeletonMaxHealth);
         witherSkeletonScale = Mth.clamp(getDouble("mobs.wither_skeleton.attributes.scale", witherSkeletonScale), 0.0625D, 16.0D);
         witherSkeletonTakeDamageFromWater = getBoolean("mobs.wither_skeleton.takes-damage-from-water", witherSkeletonTakeDamageFromWater);
+        witherSkeletonAlwaysDropExp = getBoolean("mobs.wither_skeleton.always-drop-exp", witherSkeletonAlwaysDropExp);
     }
 
     public boolean wolfRidable = false;
@@ -2934,6 +3066,7 @@ public class PurpurWorldConfig {
     public double wolfNaturalRabid = 0.0D;
     public int wolfBreedingTicks = 6000;
     public boolean wolfTakeDamageFromWater = false;
+    public boolean wolfAlwaysDropExp = false;
     private void wolfSettings() {
         wolfRidable = getBoolean("mobs.wolf.ridable", wolfRidable);
         wolfRidableInWater = getBoolean("mobs.wolf.ridable-in-water", wolfRidableInWater);
@@ -2954,6 +3087,7 @@ public class PurpurWorldConfig {
         wolfNaturalRabid = getDouble("mobs.wolf.spawn-rabid-chance", wolfNaturalRabid);
         wolfBreedingTicks = getInt("mobs.wolf.breeding-delay-ticks", wolfBreedingTicks);
         wolfTakeDamageFromWater = getBoolean("mobs.wolf.takes-damage-from-water", wolfTakeDamageFromWater);
+        wolfAlwaysDropExp = getBoolean("mobs.wolf.always-drop-exp", wolfAlwaysDropExp);
     }
 
     public boolean zoglinRidable = false;
@@ -2962,6 +3096,7 @@ public class PurpurWorldConfig {
     public double zoglinMaxHealth = 40.0D;
     public double zoglinScale = 1.0D;
     public boolean zoglinTakeDamageFromWater = false;
+    public boolean zoglinAlwaysDropExp = false;
     private void zoglinSettings() {
         zoglinRidable = getBoolean("mobs.zoglin.ridable", zoglinRidable);
         zoglinRidableInWater = getBoolean("mobs.zoglin.ridable-in-water", zoglinRidableInWater);
@@ -2974,6 +3109,7 @@ public class PurpurWorldConfig {
         zoglinMaxHealth = getDouble("mobs.zoglin.attributes.max_health", zoglinMaxHealth);
         zoglinScale = Mth.clamp(getDouble("mobs.zoglin.attributes.scale", zoglinScale), 0.0625D, 16.0D);
         zoglinTakeDamageFromWater = getBoolean("mobs.zoglin.takes-damage-from-water", zoglinTakeDamageFromWater);
+        zoglinAlwaysDropExp = getBoolean("mobs.zoglin.always-drop-exp", zoglinAlwaysDropExp);
     }
 
     public boolean zombieRidable = false;
@@ -2988,6 +3124,7 @@ public class PurpurWorldConfig {
     public boolean zombieAggressiveTowardsVillagerWhenLagging = true;
     public boolean zombieBypassMobGriefing = false;
     public boolean zombieTakeDamageFromWater = false;
+    public boolean zombieAlwaysDropExp = false;
     private void zombieSettings() {
         zombieRidable = getBoolean("mobs.zombie.ridable", zombieRidable);
         zombieRidableInWater = getBoolean("mobs.zombie.ridable-in-water", zombieRidableInWater);
@@ -3006,6 +3143,7 @@ public class PurpurWorldConfig {
         zombieAggressiveTowardsVillagerWhenLagging = getBoolean("mobs.zombie.aggressive-towards-villager-when-lagging", zombieAggressiveTowardsVillagerWhenLagging);
         zombieBypassMobGriefing = getBoolean("mobs.zombie.bypass-mob-griefing", zombieBypassMobGriefing);
         zombieTakeDamageFromWater = getBoolean("mobs.zombie.takes-damage-from-water", zombieTakeDamageFromWater);
+        zombieAlwaysDropExp = getBoolean("mobs.zombie.always-drop-exp", zombieAlwaysDropExp);
     }
 
     public boolean zombieHorseRidable = false;
@@ -3019,6 +3157,7 @@ public class PurpurWorldConfig {
     public double zombieHorseMovementSpeedMax = 0.2D;
     public double zombieHorseSpawnChance = 0.0D;
     public boolean zombieHorseTakeDamageFromWater = false;
+    public boolean zombieHorseAlwaysDropExp = false;
     private void zombieHorseSettings() {
         zombieHorseRidable = getBoolean("mobs.zombie_horse.ridable", zombieHorseRidable);
         zombieHorseRidableInWater = getBoolean("mobs.zombie_horse.ridable-in-water", zombieHorseRidableInWater);
@@ -3037,6 +3176,7 @@ public class PurpurWorldConfig {
         zombieHorseMovementSpeedMax = getDouble("mobs.zombie_horse.attributes.movement_speed.max", zombieHorseMovementSpeedMax);
         zombieHorseSpawnChance = getDouble("mobs.zombie_horse.spawn-chance", zombieHorseSpawnChance);
         zombieHorseTakeDamageFromWater = getBoolean("mobs.zombie_horse.takes-damage-from-water", zombieHorseTakeDamageFromWater);
+        zombieHorseAlwaysDropExp = getBoolean("mobs.zombie_horse.always-drop-exp", zombieHorseAlwaysDropExp);
     }
 
     public boolean zombieVillagerRidable = false;
@@ -3052,6 +3192,7 @@ public class PurpurWorldConfig {
     public int zombieVillagerCuringTimeMin = 3600;
     public int zombieVillagerCuringTimeMax = 6000;
     public boolean zombieVillagerCureEnabled = true;
+    public boolean zombieVillagerAlwaysDropExp = false;
     private void zombieVillagerSettings() {
         zombieVillagerRidable = getBoolean("mobs.zombie_villager.ridable", zombieVillagerRidable);
         zombieVillagerRidableInWater = getBoolean("mobs.zombie_villager.ridable-in-water", zombieVillagerRidableInWater);
@@ -3071,6 +3212,7 @@ public class PurpurWorldConfig {
         zombieVillagerCuringTimeMin = getInt("mobs.zombie_villager.curing_time.min", zombieVillagerCuringTimeMin);
         zombieVillagerCuringTimeMax = getInt("mobs.zombie_villager.curing_time.max", zombieVillagerCuringTimeMax);
         zombieVillagerCureEnabled = getBoolean("mobs.zombie_villager.cure.enabled", zombieVillagerCureEnabled);
+        zombieVillagerAlwaysDropExp = getBoolean("mobs.zombie_villager.always-drop-exp", zombieVillagerAlwaysDropExp);
     }
 
     public boolean zombifiedPiglinRidable = false;
@@ -3084,6 +3226,7 @@ public class PurpurWorldConfig {
     public boolean zombifiedPiglinJockeyTryExistingChickens = true;
     public boolean zombifiedPiglinCountAsPlayerKillWhenAngry = true;
     public boolean zombifiedPiglinTakeDamageFromWater = false;
+    public boolean zombifiedPiglinAlwaysDropExp = false;
     private void zombifiedPiglinSettings() {
         zombifiedPiglinRidable = getBoolean("mobs.zombified_piglin.ridable", zombifiedPiglinRidable);
         zombifiedPiglinRidableInWater = getBoolean("mobs.zombified_piglin.ridable-in-water", zombifiedPiglinRidableInWater);
@@ -3101,6 +3244,7 @@ public class PurpurWorldConfig {
         zombifiedPiglinJockeyTryExistingChickens = getBoolean("mobs.zombified_piglin.jockey.try-existing-chickens", zombifiedPiglinJockeyTryExistingChickens);
         zombifiedPiglinCountAsPlayerKillWhenAngry = getBoolean("mobs.zombified_piglin.count-as-player-kill-when-angry", zombifiedPiglinCountAsPlayerKillWhenAngry);
         zombifiedPiglinTakeDamageFromWater = getBoolean("mobs.zombified_piglin.takes-damage-from-water", zombifiedPiglinTakeDamageFromWater);
+        zombifiedPiglinAlwaysDropExp = getBoolean("mobs.zombified_piglin.always-drop-exp", zombifiedPiglinAlwaysDropExp);
     }
 
     public float hungerStarvationDamage = 1.0F;
