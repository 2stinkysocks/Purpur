From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Sun, 15 Nov 2020 02:18:15 -0800
Subject: [PATCH] Make entity breeding times configurable


diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
index 0a608418f87b71d5d71706712e1f82da0d7e4d34..03e7ca83e4c28dfaa5b52bcb100bd542db105970 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -125,8 +125,10 @@ public class VillagerMakeLove extends Behavior<Villager> {
                 return Optional.empty();
             }
             // Move age setting down
-            parent.setAge(6000);
-            partner.setAge(6000);
+            // Purpur start
+            parent.setAge(world.purpurConfig.villagerBreedingTicks);
+            partner.setAge(world.purpurConfig.villagerBreedingTicks);
+            // Purpur end
             world.addFreshEntityWithPassengers(entityvillager2, CreatureSpawnEvent.SpawnReason.BREEDING);
             // CraftBukkit end
             world.broadcastEntityEvent(entityvillager2, (byte) 12);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Animal.java b/src/main/java/net/minecraft/world/entity/animal/Animal.java
index 4637d062b6a4c4d6de2ef54ec3cfdeb4344ff38e..8df1682dca61b0f771a1c08f5bcd797506badf19 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Animal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Animal.java
@@ -49,6 +49,7 @@ public abstract class Animal extends AgeableMob {
     @Nullable
     public UUID loveCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
+    public abstract int getPurpurBreedTime(); // Purpur - Make entity breeding times configurable
 
     protected Animal(EntityType<? extends Animal> type, Level world) {
         super(type, world);
@@ -302,8 +303,10 @@ public abstract class Animal extends AgeableMob {
             entityplayer.awardStat(Stats.ANIMALS_BRED);
             CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer, this, entityanimal, entityageable);
         } // Paper
-        this.setAge(6000);
-        entityanimal.setAge(6000);
+        // Purpur start - Make entity breeding times configurable
+        this.setAge(this.getPurpurBreedTime());
+        entityanimal.setAge(entityanimal.getPurpurBreedTime());
+        // Purpur end - Make entity breeding times configurable
         this.resetLove();
         entityanimal.resetLove();
         worldserver.broadcastEntityEvent(this, (byte) 18);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 8751cc882f2dcbf6dfc10cebab9d9a4f95ebfb10..121a4c58d4052eb0880f540e87beaf12a74eecd7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -496,6 +496,12 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.beeScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.beeBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public int getRemainingPersistentAngerTime() {
         return (Integer) this.entityData.get(Bee.DATA_REMAINING_ANGER_TIME);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index b4f022093a52c1fe13ad67ad70d57fd0278a9d55..06b68fcf750a637e1f41eecacca2969cb55a8fa8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -132,6 +132,12 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.catScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.catBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.temptGoal = new Cat.CatTemptGoal(this, 0.6D, (itemstack) -> {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Chicken.java b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
index f6f7afc6a421022738f77e5eece193ad15de78ba..d06fb7d714efc88af13e6357536d4c58a7ec3bb5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Chicken.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
@@ -82,6 +82,12 @@ public class Chicken extends Animal {
         // Purpur end - Chickens can retaliate
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.chickenBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 88dd147317e200a11eb6a7e496bfffee9079fd6f..4b27440624deda151f63f7ce4670fd805d24eaba 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -68,6 +68,12 @@ public class Cow extends Animal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.cowScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.cowBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index a0adc29bb09a3eaecdaf564fd992b8aefec69629..ce597675e973eb0d7ce580a2b4dfd76e7bb586b1 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -189,6 +189,12 @@ public class Fox extends Animal implements VariantHolder<Fox.Variant> {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.foxScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.foxBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
@@ -977,8 +983,10 @@ public class Fox extends Animal implements VariantHolder<Fox.Variant> {
                     CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer2, this.animal, this.partner, entityfox);
                 }
 
-                this.animal.setAge(6000);
-                this.partner.setAge(6000);
+                // Purpur start - Make entity breeding times configurable
+                this.animal.setAge(this.animal.getPurpurBreedTime());
+                this.partner.setAge(this.partner.getPurpurBreedTime());
+                // Purpur end - Make entity breeding times configurable
                 this.animal.resetLove();
                 this.partner.resetLove();
                 worldserver.addFreshEntityWithPassengers(entityfox, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 96078cf11f13c85a3f019f70fa02668c43dbc559..28b544f4f2e0f30d831b57167fc3ea3ce28e2191 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -87,6 +87,12 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level().purpurConfig.mooshroomMaxHealth);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.mooshroomBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBlockState(pos.below()).is(Blocks.MYCELIUM) ? 10.0F : world.getPathfindingCostFromLightLevels(pos);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index c7acefca654c7a833da7c122634df5626cf208e5..9412acb55bccfb0e5f3f77ce9df09f33807de57c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -89,6 +89,12 @@ public class Ocelot extends Animal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.ocelotScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.ocelotBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     public boolean isTrusting() {
         return (Boolean) this.entityData.get(Ocelot.DATA_TRUSTING);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 08114535138918dce26c6881194617028a5a258c..9c91207391f20adaf8f777c1db9502ee7aeda597 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -146,6 +146,12 @@ public class Panda extends Animal {
         setAttributes();
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.pandaBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected boolean canDispenserEquipIntoSlot(EquipmentSlot slot) {
         return slot == EquipmentSlot.MAINHAND && this.canPickUpLoot();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index cad1d66326837d88166eb3a7b5d871c3132b8b98..2311595018175d2786e34a3dd68ded7a7fe0838c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -194,6 +194,12 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.parrotScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return 6000;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Nullable
     @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, EntitySpawnReason spawnReason, @Nullable SpawnGroupData entityData) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index f9efd4c1fc30f2bbb061d31ded6e45c546b0bfa8..aea1462503e41b09a4581651a8fa0d72e2d9b3cb 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -89,6 +89,12 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.pigScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.pigBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 09039a5a69ea582223d6ad06b1d99776742ec2e2..1fccc501f581dfd0c27c116a2e01a97abc023959 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -122,6 +122,12 @@ public class PolarBear extends Animal implements NeutralMob {
         }
     }
     // Purpur end - Breedable Polar Bears
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.polarBearBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 6448d4f44f948f08121302784e966bf58abd9be1..0b4a1a8b0a41aaa083995c2059a9ce8757d44144 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -148,6 +148,12 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.rabbitScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.rabbitBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index 3fd84abe0889b224c7c8d5af06b384d2fb431eb4..761ff22d66a191ab4c38d872e65afc2ee70f233d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -108,6 +108,12 @@ public class Sheep extends Animal implements Shearable {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.sheepScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.sheepBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.eatBlockGoal = new EatBlockGoal(this);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 2133b8a2615be6502bf9d7b4d4c1bc75929b5022..0a29ce3a783a5bcadfd386927f176457596882ce 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -110,6 +110,12 @@ public class Turtle extends Animal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.turtleScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.turtleBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     public void setHomePos(BlockPos pos) {
         this.entityData.set(Turtle.HOME_POS, pos);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index d86bad821e781d698cc2bf0b3179eb4d2ed065b1..539eba7148be12eb05c907ed86b0cea975424874 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -153,6 +153,12 @@ public class Wolf extends TamableAnimal implements NeutralMob, VariantHolder<Hol
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.wolfScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.wolfBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
diff --git a/src/main/java/net/minecraft/world/entity/animal/armadillo/Armadillo.java b/src/main/java/net/minecraft/world/entity/animal/armadillo/Armadillo.java
index 1a6c88558a11066ec2a78d40e6a1b0f2fa546b88..30779f8a00d438972ad59372ce92e23193f99820 100644
--- a/src/main/java/net/minecraft/world/entity/animal/armadillo/Armadillo.java
+++ b/src/main/java/net/minecraft/world/entity/animal/armadillo/Armadillo.java
@@ -106,6 +106,12 @@ public class Armadillo extends Animal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.armadilloScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.armadilloBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index f95b9be60c3725fe279a07300f706abb25e152f1..9bffdbfcd49cf84865926a0e341784c1d4a1c98c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -124,6 +124,12 @@ public class Axolotl extends Animal implements VariantHolder<Axolotl.Variant>, B
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.axolotlScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.axolotlBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return 0.0F;
diff --git a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
index ab0b90c300d0610e423abe7ac9e5b93305a21c5a..d0023e3734bb3c625fa53077f47039dcb82d9606 100644
--- a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
@@ -94,6 +94,12 @@ public class Camel extends AbstractHorse {
     }
     // Purpur end - Ridables
 
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.camelBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index b42e1e1749c9f18b3bf842517522e90ba60330ff..e862803b38aceec149da8deddb9c88c46e916ad6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -165,6 +165,12 @@ public class Frog extends Animal implements VariantHolder<Holder<FrogVariant>> {
     }
     // Purpur end - Ridables
 
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.frogBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected Brain.Provider<Frog> brainProvider() {
         return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 307d11e5ad6d0b47af36b1469a73ae1caa100232..c9d7be823a040e7de407537d247062821dca643a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -110,6 +110,12 @@ public class Goat extends Animal {
     }
     // Purpur end - Ridables
 
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.goatBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected Brain.Provider<Goat> brainProvider() {
         return Brain.provider(Goat.MEMORY_TYPES, Goat.SENSOR_TYPES);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
index 8fd709bcd4c7a5a875bdc65fd4dd1420ea618e3a..4cff4fcedc75a99ca71ae6a7c34d6f407665bf1b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
@@ -39,6 +39,12 @@ public class Donkey extends AbstractChestedHorse {
         return generateSpeed(this.level().purpurConfig.donkeyMovementSpeedMin, this.level().purpurConfig.donkeyMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.donkeyBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.DONKEY_AMBIENT;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
index 13056a0a13eeb3dcc164344b973e6ff656c0793d..cbeb7d1e834a4f0f120248bec619e34ca46f8069 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
@@ -66,6 +66,12 @@ public class Horse extends AbstractHorse implements VariantHolder<Variant> {
         return generateSpeed(this.level().purpurConfig.horseMovementSpeedMin, this.level().purpurConfig.horseMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.horseBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void randomizeAttributes(RandomSource random) {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)generateMaxHealth(random::nextInt));
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index cbab482bd44c0a0fa82a80f41fdfd8c124c58c43..ea396b5740ae1e7b2cf5356607835467b412d379 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -140,6 +140,12 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
         return generateSpeed(this.level().purpurConfig.llamaMovementSpeedMin, this.level().purpurConfig.llamaMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.llamaBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     public boolean isTraderLlama() {
         return false;
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
index f54df53412186a67efc8ef33b82e8756109059c3..02f075b6aadbd3b263235be761653c7d16ba3b1e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
@@ -38,6 +38,12 @@ public class Mule extends AbstractChestedHorse {
         return generateSpeed(this.level().purpurConfig.muleMovementSpeedMin, this.level().purpurConfig.muleMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.muleBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.MULE_AMBIENT;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 133b1fdba0129ccbff146af6d44d8990f7598158..064f33e8c1768b20cf1ef61d20a7bda93b6e2855 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -65,6 +65,12 @@ public class SkeletonHorse extends AbstractHorse {
         return generateSpeed(this.level().purpurConfig.skeletonHorseMovementSpeedMin, this.level().purpurConfig.skeletonHorseMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return 6000;
+    }
+    // Purpur end - Make entity breeding times configurable
     public static AttributeSupplier.Builder createAttributes() {
         return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index 39ee4b850072ff27dc86857c5ce7ef66842a214d..e9d03e3063a5afe296720314f74a25e9cfb5dabf 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -71,6 +71,12 @@ public class TraderLlama extends Llama {
         return generateSpeed(this.level().purpurConfig.traderLlamaMovementSpeedMin, this.level().purpurConfig.traderLlamaMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.traderLlamaBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public boolean isTraderLlama() {
         return true;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 6f910056aeed1b2fdf23c97ea706d062ae10bbfe..455c0e32931ef1fae41278ed360e2af535ccbaad 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -61,6 +61,12 @@ public class ZombieHorse extends AbstractHorse {
         return generateSpeed(this.level().purpurConfig.zombieHorseMovementSpeedMin, this.level().purpurConfig.zombieHorseMovementSpeedMax);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return 6000;
+    }
+    // Purpur end - Make entity breeding times configurable
     public static AttributeSupplier.Builder createAttributes() {
         return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0).add(Attributes.MOVEMENT_SPEED, 0.2F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index e1354ffd4fc3a9b5bf6b43ff5c17d2416918520b..489854333e71ad4e7635870eedbdd07a84297a13 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -114,6 +114,12 @@ public class Sniffer extends Animal {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.snifferScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.snifferBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index c66126f3a43e6e011e5f9a977ad481c96529d1d5..b2f9e7dec710f9a135074d6b5eb438e127a7aaa9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -121,6 +121,12 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         this.getAttribute(Attributes.SCALE).setBaseValue(this.level().purpurConfig.striderScale);
     }
     // Purpur end - Configurable entity base attributes
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.striderBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     public static boolean checkStriderSpawnRules(EntityType<Strider> type, LevelAccessor world, EntitySpawnReason spawnReason, BlockPos pos, RandomSource random) {
         BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable();
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 476dcc613f566d88273f195b847e6b4dec777e44..d7bef344f1d18aa6037b3805da07353c54c82142 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -100,6 +100,12 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
         this.timeInOverworld = timeInOverworld;
     }
 
+    // Purpur start - Make entity breeding times configurable
+    @Override
+    public int getPurpurBreedTime() {
+        return this.level().purpurConfig.hoglinBreedingTicks;
+    }
+    // Purpur end - Make entity breeding times configurable
     @Override
     public boolean canBeLeashed() {
         return true;
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index 6805a2f2803bb4e859afba5369308dd4d2ac5165..e363a93bdfcef7408ecdd5618b63c345ab9525b4 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -463,23 +463,27 @@ public class PurpurWorldConfig {
     public boolean armadilloControllable = true;
     public double armadilloMaxHealth = 12.0D;
     public double armadilloScale = 1.0D;
+    public int armadilloBreedingTicks = 6000;
     private void armadilloSettings() {
         armadilloRidable = getBoolean("mobs.armadillo.ridable", armadilloRidable);
         armadilloRidableInWater = getBoolean("mobs.armadillo.ridable-in-water", armadilloRidableInWater);
         armadilloControllable = getBoolean("mobs.armadillo.controllable", armadilloControllable);
         armadilloMaxHealth = getDouble("mobs.armadillo.attributes.max_health", armadilloMaxHealth);
         armadilloScale = Mth.clamp(getDouble("mobs.armadillo.attributes.scale", armadilloScale), 0.0625D, 16.0D);
+        armadilloBreedingTicks = getInt("mobs.armadillo.breeding-delay-ticks", armadilloBreedingTicks);
     }
 
     public boolean axolotlRidable = false;
     public boolean axolotlControllable = true;
     public double axolotlMaxHealth = 14.0D;
     public double axolotlScale = 1.0D;
+    public int axolotlBreedingTicks = 6000;
     private void axolotlSettings() {
         axolotlRidable = getBoolean("mobs.axolotl.ridable", axolotlRidable);
         axolotlControllable = getBoolean("mobs.axolotl.controllable", axolotlControllable);
         axolotlMaxHealth = getDouble("mobs.axolotl.attributes.max_health", axolotlMaxHealth);
         axolotlScale = Mth.clamp(getDouble("mobs.axolotl.attributes.scale", axolotlScale), 0.0625D, 16.0D);
+        axolotlBreedingTicks = getInt("mobs.axolotl.breeding-delay-ticks", axolotlBreedingTicks);
     }
 
     public boolean batRidable = false;
@@ -522,6 +526,7 @@ public class PurpurWorldConfig {
     public double beeMaxY = 320D;
     public double beeMaxHealth = 10.0D;
     public double beeScale = 1.0D;
+    public int beeBreedingTicks = 6000;
     private void beeSettings() {
         beeRidable = getBoolean("mobs.bee.ridable", beeRidable);
         beeRidableInWater = getBoolean("mobs.bee.ridable-in-water", beeRidableInWater);
@@ -534,6 +539,7 @@ public class PurpurWorldConfig {
         }
         beeMaxHealth = getDouble("mobs.bee.attributes.max_health", beeMaxHealth);
         beeScale = Mth.clamp(getDouble("mobs.bee.attributes.scale", beeScale), 0.0625D, 16.0D);
+        beeBreedingTicks = getInt("mobs.bee.breeding-delay-ticks", beeBreedingTicks);
     }
 
     public boolean blazeRidable = false;
@@ -576,6 +582,7 @@ public class PurpurWorldConfig {
     public double camelJumpStrengthMax = 0.42D;
     public double camelMovementSpeedMin = 0.09D;
     public double camelMovementSpeedMax = 0.09D;
+    public int camelBreedingTicks = 6000;
     private void camelSettings() {
         camelRidableInWater = getBoolean("mobs.camel.ridable-in-water", camelRidableInWater);
         camelMaxHealthMin = getDouble("mobs.camel.attributes.max_health.min", camelMaxHealthMin);
@@ -584,6 +591,7 @@ public class PurpurWorldConfig {
         camelJumpStrengthMax = getDouble("mobs.camel.attributes.jump_strength.max", camelJumpStrengthMax);
         camelMovementSpeedMin = getDouble("mobs.camel.attributes.movement_speed.min", camelMovementSpeedMin);
         camelMovementSpeedMax = getDouble("mobs.camel.attributes.movement_speed.max", camelMovementSpeedMax);
+        camelBreedingTicks = getInt("mobs.camel.breeding-delay-ticks", camelBreedingTicks);
     }
 
     public boolean catRidable = false;
@@ -594,6 +602,7 @@ public class PurpurWorldConfig {
     public int catSpawnDelay = 1200;
     public int catSpawnSwampHutScanRange = 16;
     public int catSpawnVillageScanRange = 48;
+    public int catBreedingTicks = 6000;
     private void catSettings() {
         catRidable = getBoolean("mobs.cat.ridable", catRidable);
         catRidableInWater = getBoolean("mobs.cat.ridable-in-water", catRidableInWater);
@@ -608,6 +617,7 @@ public class PurpurWorldConfig {
         catSpawnDelay = getInt("mobs.cat.spawn-delay", catSpawnDelay);
         catSpawnSwampHutScanRange = getInt("mobs.cat.scan-range-for-other-cats.swamp-hut", catSpawnSwampHutScanRange);
         catSpawnVillageScanRange = getInt("mobs.cat.scan-range-for-other-cats.village", catSpawnVillageScanRange);
+        catBreedingTicks = getInt("mobs.cat.breeding-delay-ticks", catBreedingTicks);
     }
 
     public boolean caveSpiderRidable = false;
@@ -634,6 +644,7 @@ public class PurpurWorldConfig {
     public double chickenMaxHealth = 4.0D;
     public double chickenScale = 1.0D;
     public boolean chickenRetaliate = false;
+    public int chickenBreedingTicks = 6000;
     private void chickenSettings() {
         chickenRidable = getBoolean("mobs.chicken.ridable", chickenRidable);
         chickenRidableInWater = getBoolean("mobs.chicken.ridable-in-water", chickenRidableInWater);
@@ -646,6 +657,7 @@ public class PurpurWorldConfig {
         chickenMaxHealth = getDouble("mobs.chicken.attributes.max_health", chickenMaxHealth);
         chickenScale = Mth.clamp(getDouble("mobs.chicken.attributes.scale", chickenScale), 0.0625D, 16.0D);
         chickenRetaliate = getBoolean("mobs.chicken.retaliate", chickenRetaliate);
+        chickenBreedingTicks = getInt("mobs.chicken.breeding-delay-ticks", chickenBreedingTicks);
     }
 
     public boolean codRidable = false;
@@ -670,6 +682,7 @@ public class PurpurWorldConfig {
     public double cowMaxHealth = 10.0D;
     public double cowScale = 1.0D;
     public int cowFeedMushrooms = 0;
+    public int cowBreedingTicks = 6000;
     private void cowSettings() {
         cowRidable = getBoolean("mobs.cow.ridable", cowRidable);
         cowRidableInWater = getBoolean("mobs.cow.ridable-in-water", cowRidableInWater);
@@ -682,6 +695,7 @@ public class PurpurWorldConfig {
         cowMaxHealth = getDouble("mobs.cow.attributes.max_health", cowMaxHealth);
         cowScale = Mth.clamp(getDouble("mobs.cow.attributes.scale", cowScale), 0.0625D, 16.0D);
         cowFeedMushrooms = getInt("mobs.cow.feed-mushrooms-for-mooshroom", cowFeedMushrooms);
+        cowBreedingTicks = getInt("mobs.cow.breeding-delay-ticks", cowBreedingTicks);
     }
 
     public boolean creakingRidable = false;
@@ -750,6 +764,7 @@ public class PurpurWorldConfig {
     public double donkeyJumpStrengthMax = 0.5D;
     public double donkeyMovementSpeedMin = 0.175D;
     public double donkeyMovementSpeedMax = 0.175D;
+    public int donkeyBreedingTicks = 6000;
     private void donkeySettings() {
         donkeyRidableInWater = getBoolean("mobs.donkey.ridable-in-water", donkeyRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -765,6 +780,7 @@ public class PurpurWorldConfig {
         donkeyJumpStrengthMax = getDouble("mobs.donkey.attributes.jump_strength.max", donkeyJumpStrengthMax);
         donkeyMovementSpeedMin = getDouble("mobs.donkey.attributes.movement_speed.min", donkeyMovementSpeedMin);
         donkeyMovementSpeedMax = getDouble("mobs.donkey.attributes.movement_speed.max", donkeyMovementSpeedMax);
+        donkeyBreedingTicks = getInt("mobs.donkey.breeding-delay-ticks", donkeyBreedingTicks);
     }
 
     public boolean drownedRidable = false;
@@ -895,6 +911,7 @@ public class PurpurWorldConfig {
     public double foxMaxHealth = 10.0D;
     public double foxScale = 1.0D;
     public boolean foxTypeChangesWithTulips = false;
+    public int foxBreedingTicks = 6000;
     private void foxSettings() {
         foxRidable = getBoolean("mobs.fox.ridable", foxRidable);
         foxRidableInWater = getBoolean("mobs.fox.ridable-in-water", foxRidableInWater);
@@ -907,17 +924,20 @@ public class PurpurWorldConfig {
         foxMaxHealth = getDouble("mobs.fox.attributes.max_health", foxMaxHealth);
         foxScale = Mth.clamp(getDouble("mobs.fox.attributes.scale", foxScale), 0.0625D, 16.0D);
         foxTypeChangesWithTulips = getBoolean("mobs.fox.tulips-change-type", foxTypeChangesWithTulips);
+        foxBreedingTicks = getInt("mobs.fox.breeding-delay-ticks", foxBreedingTicks);
     }
 
     public boolean frogRidable = false;
     public boolean frogRidableInWater = true;
     public boolean frogControllable = true;
     public float frogRidableJumpHeight = 0.65F;
+    public int frogBreedingTicks = 6000;
     private void frogSettings() {
         frogRidable = getBoolean("mobs.frog.ridable", frogRidable);
         frogRidableInWater = getBoolean("mobs.frog.ridable-in-water", frogRidableInWater);
         frogControllable = getBoolean("mobs.frog.controllable", frogControllable);
         frogRidableJumpHeight = (float) getDouble("mobs.frog.ridable-jump-height", frogRidableJumpHeight);
+        frogBreedingTicks = getInt("mobs.frog.breeding-delay-ticks", frogBreedingTicks);
     }
 
     public boolean ghastRidable = false;
@@ -992,12 +1012,14 @@ public class PurpurWorldConfig {
     public boolean goatControllable = true;
     public double goatMaxHealth = 10.0D;
     public double goatScale = 1.0D;
+    public int goatBreedingTicks = 6000;
     private void goatSettings() {
         goatRidable = getBoolean("mobs.goat.ridable", goatRidable);
         goatRidableInWater = getBoolean("mobs.goat.ridable-in-water", goatRidableInWater);
         goatControllable = getBoolean("mobs.goat.controllable", goatControllable);
         goatMaxHealth = getDouble("mobs.goat.attributes.max_health", goatMaxHealth);
         goatScale = Mth.clamp(getDouble("mobs.goat.attributes.scale", goatScale), 0.0625D, 16.0D);
+        goatBreedingTicks = getInt("mobs.goat.breeding-delay-ticks", goatBreedingTicks);
     }
 
     public boolean guardianRidable = false;
@@ -1021,6 +1043,7 @@ public class PurpurWorldConfig {
     public boolean hoglinControllable = true;
     public double hoglinMaxHealth = 40.0D;
     public double hoglinScale = 1.0D;
+    public int hoglinBreedingTicks = 6000;
     private void hoglinSettings() {
         hoglinRidable = getBoolean("mobs.hoglin.ridable", hoglinRidable);
         hoglinRidableInWater = getBoolean("mobs.hoglin.ridable-in-water", hoglinRidableInWater);
@@ -1032,6 +1055,7 @@ public class PurpurWorldConfig {
         }
         hoglinMaxHealth = getDouble("mobs.hoglin.attributes.max_health", hoglinMaxHealth);
         hoglinScale = Mth.clamp(getDouble("mobs.hoglin.attributes.scale", hoglinScale), 0.0625D, 16.0D);
+        hoglinBreedingTicks = getInt("mobs.hoglin.breeding-delay-ticks", hoglinBreedingTicks);
     }
 
     public boolean horseRidableInWater = false;
@@ -1041,6 +1065,7 @@ public class PurpurWorldConfig {
     public double horseJumpStrengthMax = 1.0D;
     public double horseMovementSpeedMin = 0.1125D;
     public double horseMovementSpeedMax = 0.3375D;
+    public int horseBreedingTicks = 6000;
     private void horseSettings() {
         horseRidableInWater = getBoolean("mobs.horse.ridable-in-water", horseRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1056,6 +1081,7 @@ public class PurpurWorldConfig {
         horseJumpStrengthMax = getDouble("mobs.horse.attributes.jump_strength.max", horseJumpStrengthMax);
         horseMovementSpeedMin = getDouble("mobs.horse.attributes.movement_speed.min", horseMovementSpeedMin);
         horseMovementSpeedMax = getDouble("mobs.horse.attributes.movement_speed.max", horseMovementSpeedMax);
+        horseBreedingTicks = getInt("mobs.horse.breeding-delay-ticks", horseBreedingTicks);
     }
 
     public boolean huskRidable = false;
@@ -1139,6 +1165,7 @@ public class PurpurWorldConfig {
     public double llamaJumpStrengthMax = 0.5D;
     public double llamaMovementSpeedMin = 0.175D;
     public double llamaMovementSpeedMax = 0.175D;
+    public int llamaBreedingTicks = 6000;
     private void llamaSettings() {
         llamaRidable = getBoolean("mobs.llama.ridable", llamaRidable);
         llamaRidableInWater = getBoolean("mobs.llama.ridable-in-water", llamaRidableInWater);
@@ -1156,6 +1183,7 @@ public class PurpurWorldConfig {
         llamaJumpStrengthMax = getDouble("mobs.llama.attributes.jump_strength.max", llamaJumpStrengthMax);
         llamaMovementSpeedMin = getDouble("mobs.llama.attributes.movement_speed.min", llamaMovementSpeedMin);
         llamaMovementSpeedMax = getDouble("mobs.llama.attributes.movement_speed.max", llamaMovementSpeedMax);
+        llamaBreedingTicks = getInt("mobs.llama.breeding-delay-ticks", llamaBreedingTicks);
     }
 
     public boolean magmaCubeRidable = false;
@@ -1185,6 +1213,7 @@ public class PurpurWorldConfig {
     public boolean mooshroomControllable = true;
     public double mooshroomMaxHealth = 10.0D;
     public double mooshroomScale = 1.0D;
+    public int mooshroomBreedingTicks = 6000;
     private void mooshroomSettings() {
         mooshroomRidable = getBoolean("mobs.mooshroom.ridable", mooshroomRidable);
         mooshroomRidableInWater = getBoolean("mobs.mooshroom.ridable-in-water", mooshroomRidableInWater);
@@ -1196,6 +1225,7 @@ public class PurpurWorldConfig {
         }
         mooshroomMaxHealth = getDouble("mobs.mooshroom.attributes.max_health", mooshroomMaxHealth);
         mooshroomScale = Mth.clamp(getDouble("mobs.mooshroom.attributes.scale", mooshroomScale), 0.0625D, 16.0D);
+        mooshroomBreedingTicks = getInt("mobs.mooshroom.breeding-delay-ticks", mooshroomBreedingTicks);
     }
 
     public boolean muleRidableInWater = false;
@@ -1205,6 +1235,7 @@ public class PurpurWorldConfig {
     public double muleJumpStrengthMax = 0.5D;
     public double muleMovementSpeedMin = 0.175D;
     public double muleMovementSpeedMax = 0.175D;
+    public int muleBreedingTicks = 6000;
     private void muleSettings() {
         muleRidableInWater = getBoolean("mobs.mule.ridable-in-water", muleRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1220,6 +1251,7 @@ public class PurpurWorldConfig {
         muleJumpStrengthMax = getDouble("mobs.mule.attributes.jump_strength.max", muleJumpStrengthMax);
         muleMovementSpeedMin = getDouble("mobs.mule.attributes.movement_speed.min", muleMovementSpeedMin);
         muleMovementSpeedMax = getDouble("mobs.mule.attributes.movement_speed.max", muleMovementSpeedMax);
+        muleBreedingTicks = getInt("mobs.mule.breeding-delay-ticks", muleBreedingTicks);
     }
 
     public boolean ocelotRidable = false;
@@ -1227,6 +1259,7 @@ public class PurpurWorldConfig {
     public boolean ocelotControllable = true;
     public double ocelotMaxHealth = 10.0D;
     public double ocelotScale = 1.0D;
+    public int ocelotBreedingTicks = 6000;
     private void ocelotSettings() {
         ocelotRidable = getBoolean("mobs.ocelot.ridable", ocelotRidable);
         ocelotRidableInWater = getBoolean("mobs.ocelot.ridable-in-water", ocelotRidableInWater);
@@ -1238,6 +1271,7 @@ public class PurpurWorldConfig {
         }
         ocelotMaxHealth = getDouble("mobs.ocelot.attributes.max_health", ocelotMaxHealth);
         ocelotScale = Mth.clamp(getDouble("mobs.ocelot.attributes.scale", ocelotScale), 0.0625D, 16.0D);
+        ocelotBreedingTicks = getInt("mobs.ocelot.breeding-delay-ticks", ocelotBreedingTicks);
     }
 
     public boolean pandaRidable = false;
@@ -1245,6 +1279,7 @@ public class PurpurWorldConfig {
     public boolean pandaControllable = true;
     public double pandaMaxHealth = 20.0D;
     public double pandaScale = 1.0D;
+    public int pandaBreedingTicks = 6000;
     private void pandaSettings() {
         pandaRidable = getBoolean("mobs.panda.ridable", pandaRidable);
         pandaRidableInWater = getBoolean("mobs.panda.ridable-in-water", pandaRidableInWater);
@@ -1256,6 +1291,7 @@ public class PurpurWorldConfig {
         }
         pandaMaxHealth = getDouble("mobs.panda.attributes.max_health", pandaMaxHealth);
         pandaScale = Mth.clamp(getDouble("mobs.panda.attributes.scale", pandaScale), 0.0625D, 16.0D);
+        pandaBreedingTicks = getInt("mobs.panda.breeding-delay-ticks", pandaBreedingTicks);
     }
 
     public boolean parrotRidable = false;
@@ -1342,6 +1378,7 @@ public class PurpurWorldConfig {
     public double pigMaxHealth = 10.0D;
     public double pigScale = 1.0D;
     public boolean pigGiveSaddleBack = false;
+    public int pigBreedingTicks = 6000;
     private void pigSettings() {
         pigRidable = getBoolean("mobs.pig.ridable", pigRidable);
         pigRidableInWater = getBoolean("mobs.pig.ridable-in-water", pigRidableInWater);
@@ -1354,6 +1391,7 @@ public class PurpurWorldConfig {
         pigMaxHealth = getDouble("mobs.pig.attributes.max_health", pigMaxHealth);
         pigScale = Mth.clamp(getDouble("mobs.pig.attributes.scale", pigScale), 0.0625D, 16.0D);
         pigGiveSaddleBack = getBoolean("mobs.pig.give-saddle-back", pigGiveSaddleBack);
+        pigBreedingTicks = getInt("mobs.pig.breeding-delay-ticks", pigBreedingTicks);
     }
 
     public boolean piglinRidable = false;
@@ -1417,6 +1455,7 @@ public class PurpurWorldConfig {
     public double polarBearScale = 1.0D;
     public String polarBearBreedableItemString = "";
     public Item polarBearBreedableItem = null;
+    public int polarBearBreedingTicks = 6000;
     private void polarBearSettings() {
         polarBearRidable = getBoolean("mobs.polar_bear.ridable", polarBearRidable);
         polarBearRidableInWater = getBoolean("mobs.polar_bear.ridable-in-water", polarBearRidableInWater);
@@ -1431,6 +1470,7 @@ public class PurpurWorldConfig {
         polarBearBreedableItemString = getString("mobs.polar_bear.breedable-item", polarBearBreedableItemString);
         Item item = BuiltInRegistries.ITEM.getValue(ResourceLocation.parse(polarBearBreedableItemString));
         if (item != Items.AIR) polarBearBreedableItem = item;
+        polarBearBreedingTicks = getInt("mobs.polar_bear.breeding-delay-ticks", polarBearBreedingTicks);
     }
 
     public boolean pufferfishRidable = false;
@@ -1456,6 +1496,7 @@ public class PurpurWorldConfig {
     public double rabbitScale = 1.0D;
     public double rabbitNaturalToast = 0.0D;
     public double rabbitNaturalKiller = 0.0D;
+    public int rabbitBreedingTicks = 6000;
     private void rabbitSettings() {
         rabbitRidable = getBoolean("mobs.rabbit.ridable", rabbitRidable);
         rabbitRidableInWater = getBoolean("mobs.rabbit.ridable-in-water", rabbitRidableInWater);
@@ -1469,6 +1510,7 @@ public class PurpurWorldConfig {
         rabbitScale = Mth.clamp(getDouble("mobs.rabbit.attributes.scale", rabbitScale), 0.0625D, 16.0D);
         rabbitNaturalToast = getDouble("mobs.rabbit.spawn-toast-chance", rabbitNaturalToast);
         rabbitNaturalKiller = getDouble("mobs.rabbit.spawn-killer-rabbit-chance", rabbitNaturalKiller);
+        rabbitBreedingTicks = getInt("mobs.rabbit.breeding-delay-ticks", rabbitBreedingTicks);
     }
 
     public boolean ravagerRidable = false;
@@ -1510,6 +1552,7 @@ public class PurpurWorldConfig {
     public boolean sheepControllable = true;
     public double sheepMaxHealth = 8.0D;
     public double sheepScale = 1.0D;
+    public int sheepBreedingTicks = 6000;
     private void sheepSettings() {
         sheepRidable = getBoolean("mobs.sheep.ridable", sheepRidable);
         sheepRidableInWater = getBoolean("mobs.sheep.ridable-in-water", sheepRidableInWater);
@@ -1521,6 +1564,7 @@ public class PurpurWorldConfig {
         }
         sheepMaxHealth = getDouble("mobs.sheep.attributes.max_health", sheepMaxHealth);
         sheepScale = Mth.clamp(getDouble("mobs.sheep.attributes.scale", sheepScale), 0.0625D, 16.0D);
+        sheepBreedingTicks = getInt("mobs.sheep.breeding-delay-ticks", sheepBreedingTicks);
     }
 
     public boolean shulkerRidable = false;
@@ -1657,12 +1701,14 @@ public class PurpurWorldConfig {
     public boolean snifferControllable = true;
     public double snifferMaxHealth = 14.0D;
     public double snifferScale = 1.0D;
+    public int snifferBreedingTicks = 6000;
     private void snifferSettings() {
         snifferRidable = getBoolean("mobs.sniffer.ridable", snifferRidable);
         snifferRidableInWater = getBoolean("mobs.sniffer.ridable-in-water", snifferRidableInWater);
         snifferControllable = getBoolean("mobs.sniffer.controllable", snifferControllable);
         snifferMaxHealth = getDouble("mobs.sniffer.attributes.max_health", snifferMaxHealth);
         snifferScale = Mth.clamp(getDouble("mobs.sniffer.attributes.scale", snifferScale), 0.0625D, 16.0D);
+        snifferBreedingTicks = getInt("mobs.sniffer.breeding-delay-ticks", snifferBreedingTicks);
     }
 
     public boolean squidRidable = false;
@@ -1728,6 +1774,7 @@ public class PurpurWorldConfig {
     public boolean striderControllable = true;
     public double striderMaxHealth = 20.0D;
     public double striderScale = 1.0D;
+    public int striderBreedingTicks = 6000;
     private void striderSettings() {
         striderRidable = getBoolean("mobs.strider.ridable", striderRidable);
         striderRidableInWater = getBoolean("mobs.strider.ridable-in-water", striderRidableInWater);
@@ -1739,6 +1786,7 @@ public class PurpurWorldConfig {
         }
         striderMaxHealth = getDouble("mobs.strider.attributes.max_health", striderMaxHealth);
         striderScale = Mth.clamp(getDouble("mobs.strider.attributes.scale", striderScale), 0.0625D, 16.0D);
+        striderBreedingTicks = getInt("mobs.strider.breeding-delay-ticks", striderBreedingTicks);
     }
 
     public boolean tadpoleRidable = false;
@@ -1759,6 +1807,7 @@ public class PurpurWorldConfig {
     public double traderLlamaJumpStrengthMax = 0.5D;
     public double traderLlamaMovementSpeedMin = 0.175D;
     public double traderLlamaMovementSpeedMax = 0.175D;
+    public int traderLlamaBreedingTicks = 6000;
     private void traderLlamaSettings() {
         traderLlamaRidable = getBoolean("mobs.trader_llama.ridable", traderLlamaRidable);
         traderLlamaRidableInWater = getBoolean("mobs.trader_llama.ridable-in-water", traderLlamaRidableInWater);
@@ -1776,6 +1825,7 @@ public class PurpurWorldConfig {
         traderLlamaJumpStrengthMax = getDouble("mobs.trader_llama.attributes.jump_strength.max", traderLlamaJumpStrengthMax);
         traderLlamaMovementSpeedMin = getDouble("mobs.trader_llama.attributes.movement_speed.min", traderLlamaMovementSpeedMin);
         traderLlamaMovementSpeedMax = getDouble("mobs.trader_llama.attributes.movement_speed.max", traderLlamaMovementSpeedMax);
+        traderLlamaBreedingTicks = getInt("mobs.trader_llama.breeding-delay-ticks", traderLlamaBreedingTicks);
     }
 
     public boolean tropicalFishRidable = false;
@@ -1799,6 +1849,7 @@ public class PurpurWorldConfig {
     public boolean turtleControllable = true;
     public double turtleMaxHealth = 30.0D;
     public double turtleScale = 1.0D;
+    public int turtleBreedingTicks = 6000;
     private void turtleSettings() {
         turtleRidable = getBoolean("mobs.turtle.ridable", turtleRidable);
         turtleRidableInWater = getBoolean("mobs.turtle.ridable-in-water", turtleRidableInWater);
@@ -1810,6 +1861,7 @@ public class PurpurWorldConfig {
         }
         turtleMaxHealth = getDouble("mobs.turtle.attributes.max_health", turtleMaxHealth);
         turtleScale = Mth.clamp(getDouble("mobs.turtle.attributes.scale", turtleScale), 0.0625D, 16.0D);
+        turtleBreedingTicks = getInt("mobs.turtle.breeding-delay-ticks", turtleBreedingTicks);
     }
 
     public boolean vexRidable = false;
@@ -1841,6 +1893,7 @@ public class PurpurWorldConfig {
     public double villagerTemptRange = 10.0D;
     public boolean villagerCanBeLeashed = false;
     public boolean villagerCanBreed = true;
+    public int villagerBreedingTicks = 6000;
     private void villagerSettings() {
         villagerRidable = getBoolean("mobs.villager.ridable", villagerRidable);
         villagerRidableInWater = getBoolean("mobs.villager.ridable-in-water", villagerRidableInWater);
@@ -1856,6 +1909,7 @@ public class PurpurWorldConfig {
         villagerTemptRange = getDouble("mobs.villager.attributes.tempt_range", villagerTemptRange);
         villagerCanBeLeashed = getBoolean("mobs.villager.can-be-leashed", villagerCanBeLeashed);
         villagerCanBreed = getBoolean("mobs.villager.can-breed", villagerCanBreed);
+        villagerBreedingTicks = getInt("mobs.villager.breeding-delay-ticks", villagerBreedingTicks);
     }
 
     public boolean vindicatorRidable = false;
@@ -1980,6 +2034,7 @@ public class PurpurWorldConfig {
     public boolean wolfControllable = true;
     public double wolfMaxHealth = 8.0D;
     public double wolfScale = 1.0D;
+    public int wolfBreedingTicks = 6000;
     private void wolfSettings() {
         wolfRidable = getBoolean("mobs.wolf.ridable", wolfRidable);
         wolfRidableInWater = getBoolean("mobs.wolf.ridable-in-water", wolfRidableInWater);
@@ -1991,6 +2046,7 @@ public class PurpurWorldConfig {
         }
         wolfMaxHealth = getDouble("mobs.wolf.attributes.max_health", wolfMaxHealth);
         wolfScale = Mth.clamp(getDouble("mobs.wolf.attributes.scale", wolfScale), 0.0625D, 16.0D);
+        wolfBreedingTicks = getInt("mobs.wolf.breeding-delay-ticks", wolfBreedingTicks);
     }
 
     public boolean zoglinRidable = false;
