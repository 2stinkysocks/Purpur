--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -627,6 +_,26 @@
         return this.isDamageableItem() && this.getDamageValue() > 0;
     }
 
+    // Purpur start - Add option to mend the most damaged equipment first
+    public float getDamagePercent() {
+        if (this.has(DataComponents.UNBREAKABLE)) {
+            return 0.0F;
+        }
+
+        final int maxDamage = this.getOrDefault(DataComponents.MAX_DAMAGE, 0);
+        if (maxDamage == 0) {
+            return 0.0F;
+        }
+
+        final int damage = this.getOrDefault(DataComponents.DAMAGE, 0);
+        if (damage == 0) {
+            return 0.0F;
+        }
+
+        return (float) damage / maxDamage;
+    }
+    // Purpur end - Add option to mend the most damaged equipment first
+
     public int getDamageValue() {
         return Mth.clamp(this.getOrDefault(DataComponents.DAMAGE, Integer.valueOf(0)), 0, this.getMaxDamage());
     }
@@ -1232,6 +_,12 @@
     public boolean isEnchanted() {
         return !this.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY).isEmpty();
     }
+
+    // Purpur start - Config to allow unsafe enchants
+    public boolean hasEnchantment(Holder<Enchantment> enchantment) {
+        return this.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY).getLevel(enchantment) > 0;
+    }
+    // Purpur end - Config to allow unsafe enchants
 
     public ItemEnchantments getEnchantments() {
         return this.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
