--- a/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -163,16 +_,32 @@
         return this.setText(updater.apply(text), isFrontText);
     }
 
+    // Purpur start - Signs allow color codes
+    private Component translateColors(org.bukkit.entity.Player player, String line, Style style) {
+        if (level.purpurConfig.signAllowColors) {
+            if (player.hasPermission("purpur.sign.color")) line = line.replaceAll("(?i)&([0-9a-fr])", "\u00a7$1");
+            if (player.hasPermission("purpur.sign.style")) line = line.replaceAll("(?i)&([l-or])", "\u00a7$1");
+            if (player.hasPermission("purpur.sign.magic")) line = line.replaceAll("(?i)&([kr])", "\u00a7$1");
+
+            return io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line));
+        } else {
+            return Component.literal(line).setStyle(style);
+        }
+    }
+    // Purpur end - Signs allow color codes
+
     private SignText setMessages(Player player, List<FilteredText> filteredText, SignText text, boolean front) { // CraftBukkit
         SignText originalText = text; // CraftBukkit
         for (int i = 0; i < filteredText.size(); i++) {
             FilteredText filteredText1 = filteredText.get(i);
             Style style = text.getMessage(i, player.isTextFilteringEnabled()).getStyle();
+
+            org.bukkit.entity.Player craftPlayer =  (org.bukkit.craftbukkit.entity.CraftPlayer) player.getBukkitEntity(); // Purpur - Signs allow color codes
             if (player.isTextFilteringEnabled()) {
-                text = text.setMessage(i, Component.literal(net.minecraft.util.StringUtil.filterText(filteredText1.filteredOrEmpty())).setStyle(style)); // Paper - filter sign text to chat only
+                text = text.setMessage(i, translateColors(craftPlayer, net.minecraft.util.StringUtil.filterText(filteredText1.filteredOrEmpty()), style)); // Paper - filter sign text to chat only // Purpur - Signs allow color codes
             } else {
                 text = text.setMessage(
-                    i, Component.literal(filteredText1.raw()).setStyle(style), Component.literal(net.minecraft.util.StringUtil.filterText(filteredText1.filteredOrEmpty())).setStyle(style) // Paper - filter sign text to chat only
+                    i, translateColors(craftPlayer, net.minecraft.util.StringUtil.filterText(filteredText1.raw()), style), translateColors(craftPlayer, net.minecraft.util.StringUtil.filterText(filteredText1.filteredOrEmpty()), style) // Paper - filter sign text to chat only // Purpur - Signs allow color codes
                 );
             }
         }
@@ -310,6 +_,28 @@
         // CraftBukkit - this
         return new CommandSourceStack(commandSource, Vec3.atCenterOf(pos), Vec2.ZERO, (ServerLevel) world, 2, string, component, world.getServer(), player); // Paper - Fix commands from signs not firing command events
     }
+
+    // Purpur start - Signs allow color codes
+    public ClientboundBlockEntityDataPacket getTranslatedUpdatePacket(boolean filtered, boolean front) {
+        final CompoundTag nbt = new CompoundTag();
+        this.saveAdditional(nbt, this.getLevel().registryAccess());
+        final Component[] lines = front ? frontText.getMessages(filtered) : backText.getMessages(filtered);
+        final String side = front ? "front_text" : "back_text";
+        for (int i = 0; i < 4; i++) {
+            final var component = io.papermc.paper.adventure.PaperAdventure.asAdventure(lines[i]);
+            final String line = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacyAmpersand().serialize(component);
+            final var text = net.kyori.adventure.text.Component.text(line);
+            final String json = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(text);
+            if (!nbt.contains(side)) nbt.put(side, new CompoundTag());
+            final CompoundTag sideNbt = nbt.getCompound(side);
+            if (!sideNbt.contains("messages")) sideNbt.put("messages", new net.minecraft.nbt.ListTag());
+            final net.minecraft.nbt.ListTag messagesNbt = sideNbt.getList("messages", Tag.TAG_STRING);
+            messagesNbt.set(i, net.minecraft.nbt.StringTag.valueOf(json));
+        }
+        nbt.putString("PurpurEditor", "true");
+        return ClientboundBlockEntityDataPacket.create(this, (blockEntity, registryAccess) -> nbt);
+    }
+    // Purpur end - Signs allow color codes
 
     @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
