--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -459,6 +_,12 @@
                     if (d < 0.0) {
                         double damagePerBlock = this.level().getWorldBorder().getDamagePerBlock();
                         if (damagePerBlock > 0.0) {
+                            // Purpur start - Add option to teleport to spawn if outside world border
+                            if (this.level().purpurConfig.teleportIfOutsideBorder && this instanceof ServerPlayer serverPlayer) {
+                                serverPlayer.teleport(io.papermc.paper.util.MCUtil.toLocation(this.level(), this.level().getSharedSpawnPos()));
+                                return;
+                            }
+                            // Purpur end - Add option to teleport to spawn if outside world border
                             this.hurtServer(serverLevel1, this.damageSources().outOfBorder(), Math.max(1, Mth.floor(-d * damagePerBlock)));
                         }
                     }
@@ -472,7 +_,7 @@
                     && (!flag || !((Player)this).getAbilities().invulnerable);
                 if (flag1) {
                     this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
-                    if (this.getAirSupply() == -20) {
+                    if (this.getAirSupply() == -this.level().purpurConfig.drowningDamageInterval) { // Purpur - Drowning Settings
                         this.setAirSupply(0);
                         Vec3 deltaMovement = this.getDeltaMovement();
 
@@ -492,7 +_,7 @@
                                 );
                         }
 
-                        this.hurt(this.damageSources().drown(), 2.0F);
+                        this.hurt(this.damageSources().drown(), (float) this.level().purpurConfig.damageFromDrowning); // Purpur - Drowning Settings
                     }
                 } else if (this.getAirSupply() < this.getMaxAirSupply()) {
                     this.setAirSupply(this.increaseAirSupply(this.getAirSupply()));
@@ -1009,14 +_,32 @@
         if (lookingEntity != null) {
             ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.HEAD);
             EntityType<?> type = lookingEntity.getType();
-            if (type == EntityType.SKELETON && itemBySlot.is(Items.SKELETON_SKULL)
-                || type == EntityType.ZOMBIE && itemBySlot.is(Items.ZOMBIE_HEAD)
-                || type == EntityType.PIGLIN && itemBySlot.is(Items.PIGLIN_HEAD)
-                || type == EntityType.PIGLIN_BRUTE && itemBySlot.is(Items.PIGLIN_HEAD)
-                || type == EntityType.CREEPER && itemBySlot.is(Items.CREEPER_HEAD)) {
-                d *= 0.5;
-            }
-        }
+            // Purpur start - Mob head visibility percent
+            if (type == EntityType.SKELETON && itemBySlot.is(Items.SKELETON_SKULL)) {
+                d *= lookingEntity.level().purpurConfig.skeletonHeadVisibilityPercent;
+            }
+            else if (type == EntityType.ZOMBIE && itemBySlot.is(Items.ZOMBIE_HEAD)) {
+                d *= lookingEntity.level().purpurConfig.zombieHeadVisibilityPercent;
+            }
+            else if ((type == EntityType.PIGLIN || type == EntityType.PIGLIN_BRUTE) && itemBySlot.is(Items.PIGLIN_HEAD)) {
+                d *= lookingEntity.level().purpurConfig.piglinHeadVisibilityPercent;
+            }
+            else if (type == EntityType.CREEPER && itemBySlot.is(Items.CREEPER_HEAD)) {
+                d *= lookingEntity.level().purpurConfig.creeperHeadVisibilityPercent;
+            }
+            // Purpur end - Mob head visibility percent
+        }
+
+        // Purpur start - Configurable mob blindness
+        if (lookingEntity instanceof LivingEntity entityliving) {
+            if (entityliving.hasEffect(MobEffects.BLINDNESS)) {
+                int amplifier = entityliving.getEffect(MobEffects.BLINDNESS).getAmplifier();
+                for (int i = 0; i < amplifier; i++) {
+                    d *= this.level().purpurConfig.mobsBlindnessMultiplier;
+                }
+            }
+        }
+        // Purpur end - Configurable mob blindness
 
         return d;
     }
@@ -1063,6 +_,7 @@
             Iterator<MobEffectInstance> iterator = this.activeEffects.values().iterator();
             while (iterator.hasNext()) {
                 MobEffectInstance effect = iterator.next();
+                if (cause == EntityPotionEffectEvent.Cause.MILK && !this.level().purpurConfig.milkClearsBeneficialEffects && effect.getEffect().value().isBeneficial()) continue; // Purpur - Milk Keeps Beneficial Effects
                 EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, EntityPotionEffectEvent.Action.CLEARED);
                 if (event.isCancelled()) {
                     continue;
@@ -1372,6 +_,24 @@
                 this.stopSleeping();
             }
 
+            // Purpur start - One Punch Man!
+            if (damageSource.getEntity() instanceof net.minecraft.world.entity.player.Player player && damageSource.getEntity().level().purpurConfig.creativeOnePunch && !damageSource.is(DamageTypeTags.IS_PROJECTILE)) {
+                if (player.isCreative()) {
+                    org.apache.commons.lang3.mutable.MutableDouble attackDamage = new org.apache.commons.lang3.mutable.MutableDouble();
+                    player.getMainHandItem().forEachModifier(EquipmentSlot.MAINHAND, (attributeHolder, attributeModifier) -> {
+                        if (attributeModifier.operation() == AttributeModifier.Operation.ADD_VALUE) {
+                            attackDamage.addAndGet(attributeModifier.amount());
+                        }
+                    });
+
+                    if (attackDamage.doubleValue() == 0.0D) {
+                        // One punch!
+                        amount = 9999F;
+                    }
+                }
+            }
+            // Purpur end - One Punch Man!
+
             this.noActionTime = 0;
             if (amount < 0.0F) {
                 amount = 0.0F;
@@ -1536,11 +_,11 @@
     protected Player resolvePlayerResponsibleForDamage(DamageSource damageSource) {
         Entity entity = damageSource.getEntity();
         if (entity instanceof Player player) {
-            this.lastHurtByPlayerTime = 100;
+            this.lastHurtByPlayerTime = this.level().purpurConfig.mobLastHurtByPlayerTime; // Purpur - Config for mob last hurt by player time
             this.lastHurtByPlayer = player;
             return player;
         } else if (entity instanceof Wolf wolf && wolf.isTame()) {
-            this.lastHurtByPlayerTime = 100;
+            this.lastHurtByPlayerTime = this.level().purpurConfig.mobLastHurtByPlayerTime; // Purpur - Config for mob last hurt by player time
             if (wolf.getOwner() instanceof Player player1) {
                 this.lastHurtByPlayer = player1;
             } else {
@@ -1594,6 +_,18 @@
                 }
             }
 
+            // Purpur start - Totems work in inventory
+            if (level().purpurConfig.totemOfUndyingWorksInInventory && this instanceof ServerPlayer player && (itemStack == null || itemStack.getItem() != Items.TOTEM_OF_UNDYING) && player.getBukkitEntity().hasPermission("purpur.inventory_totem")) {
+                for (ItemStack item : player.getInventory().items) {
+                    if (item.getItem() == Items.TOTEM_OF_UNDYING) {
+                        itemInHand = item;
+                        itemStack = item.copy();
+                        break;
+                    }
+                }
+            }
+            // Purpur end - Totems work in inventory
+
             final org.bukkit.inventory.EquipmentSlot handSlot = (hand != null) ? org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(hand) : null;
             final EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), handSlot);
             event.setCancelled(itemStack == null);
@@ -1790,6 +_,7 @@
         boolean flag = this.lastHurtByPlayerTime > 0;
         this.dropEquipment(level); // CraftBukkit - from below
         if (this.shouldDropLoot() && level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+            if (!(damageSource.is(net.minecraft.world.damagesource.DamageTypes.CRAMMING) && level().purpurConfig.disableDropsOnCrammingDeath)) { // Purpur - Disable loot drops on death by cramming
             this.dropFromLootTable(level, damageSource, flag);
             // Paper start
             final boolean prev = this.clearEquipmentSlots;
@@ -1798,6 +_,7 @@
             // Paper end
             this.dropCustomDeathLoot(level, damageSource, flag);
             this.clearEquipmentSlots = prev; // Paper
+            } // Purpur - Disable loot drops on death by cramming
         }
 
         // CraftBukkit start - Call death event // Paper start - call advancement triggers with correct entity equipment
@@ -2989,6 +_,7 @@
             float f = (float)(d * 10.0 - 3.0);
             if (f > 0.0F) {
                 this.playSound(this.getFallDamageSound((int)f), 1.0F, 1.0F);
+                if (level().purpurConfig.elytraKineticDamage) // Purpur - Toggle for kinetic damage
                 this.hurt(this.damageSources().flyIntoWall(), f);
             }
         }
@@ -4398,6 +_,12 @@
             ? slot == EquipmentSlot.MAINHAND && this.canUseSlot(EquipmentSlot.MAINHAND)
             : slot == equippable.slot() && this.canUseSlot(equippable.slot()) && equippable.canBeEquippedBy(this.getType());
     }
+
+    // Purpur start - Dispenser curse of binding protection
+    public @Nullable EquipmentSlot getEquipmentSlotForDispenserItem(ItemStack itemstack) {
+        return EnchantmentHelper.getItemEnchantmentLevel(net.minecraft.world.item.enchantment.Enchantments.BINDING_CURSE, itemstack) > 0 ? null : this.getEquipmentSlotForItem(itemstack);
+    }
+    // Purpur end - Dispenser curse of binding protection
 
     private static SlotAccess createEquipmentSlotAccess(LivingEntity entity, EquipmentSlot slot) {
         return slot != EquipmentSlot.HEAD && slot != EquipmentSlot.MAINHAND && slot != EquipmentSlot.OFFHAND
