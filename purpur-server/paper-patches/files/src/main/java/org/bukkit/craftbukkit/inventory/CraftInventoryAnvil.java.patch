--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
@@ -19,6 +_,10 @@
     private int repairCost;
     private int repairCostAmount;
     private int maximumRepairCost;
+    // Purpur start - Anvil API
+    private boolean bypassCost;
+    private boolean canDoUnsafeEnchants;
+    // Purpur end - Anvil API
 
     public CraftInventoryAnvil(Location location, Container inventory, Container resultInventory) {
         super(inventory, resultInventory);
@@ -27,6 +_,10 @@
         this.repairCost = CraftInventoryAnvil.DEFAULT_REPAIR_COST;
         this.repairCostAmount = CraftInventoryAnvil.DEFAULT_REPAIR_COST_AMOUNT;
         this.maximumRepairCost = CraftInventoryAnvil.DEFAULT_MAXIMUM_REPAIR_COST;
+        // Purpur start - Anvil API
+        this.bypassCost = false;
+        this.canDoUnsafeEnchants = false;
+        // Purpur end - Anvil API
     }
 
     @Override
@@ -113,4 +_,30 @@
             consumer.accept(cav);
         }
     }
+
+    // Purpur start - Anvil API
+    @Override
+    public boolean canBypassCost() {
+        this.syncWithArbitraryViewValue((cav) -> this.bypassCost = cav.canBypassCost());
+        return this.bypassCost;
+    }
+
+    @Override
+    public void setBypassCost(boolean bypassCost) {
+        this.bypassCost = bypassCost;
+        this.syncViews((cav) -> cav.setBypassCost(bypassCost));
+    }
+
+    @Override
+    public boolean canDoUnsafeEnchants() {
+        this.syncWithArbitraryViewValue((cav) -> this.canDoUnsafeEnchants = cav.canDoUnsafeEnchants());
+        return this.canDoUnsafeEnchants;
+    }
+
+    @Override
+    public void setDoUnsafeEnchants(boolean canDoUnsafeEnchants) {
+        this.canDoUnsafeEnchants = canDoUnsafeEnchants;
+        this.syncViews((cav) -> cav.setDoUnsafeEnchants(canDoUnsafeEnchants));
+    }
+    // Purpur end - Anvil API
 }
