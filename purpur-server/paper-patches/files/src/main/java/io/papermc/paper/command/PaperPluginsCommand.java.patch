--- a/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
+++ b/src/main/java/io/papermc/paper/command/PaperPluginsCommand.java
@@ -70,10 +_,10 @@
         this.setAliases(List.of("pl"));
     }
 
-    private static <T> List<Component> formatProviders(final TreeMap<String, PluginProvider<T>> plugins) {
+    private static <T> List<Component> formatProviders(final TreeMap<String, PluginProvider<T>> plugins, CommandSender sender) { // Purpur - Improve output of plugins command
         final List<Component> components = new ArrayList<>(plugins.size());
         for (final PluginProvider<T> entry : plugins.values()) {
-            components.add(formatProvider(entry));
+            components.add(formatProvider(entry, sender)); // Purpur - Improve output of plugins command
         }
 
         boolean isFirst = true;
@@ -100,15 +_,49 @@
         return formattedSubLists;
     }
 
-    private static Component formatProvider(final PluginProvider<?> provider) {
+    private static Component formatProvider(final PluginProvider<?> provider, CommandSender sender) { // Purpur - Improve output of plugins command
         final TextComponent.Builder builder = Component.text();
         if (provider instanceof final SpigotPluginProvider spigotPluginProvider && CraftMagicNumbers.isLegacy(spigotPluginProvider.getMeta())) {
             builder.append(LEGACY_PLUGIN_STAR);
         }
 
         final String name = provider.getMeta().getName();
-        final Component pluginName = Component.text(name, fromStatus(provider))
-            .clickEvent(ClickEvent.runCommand("/version " + name));
+        // Purpur start - Improve output of plugins command
+        Component pluginName = Component.text(name, fromStatus(provider))
+            .clickEvent(ClickEvent.suggestCommand("/version " + name));
+
+        if (sender instanceof org.bukkit.entity.Player && sender.hasPermission("bukkit.command.version")) {
+            // Event components
+            String description = provider.getMeta().getDescription();
+            TextComponent.Builder hover = Component.text();
+            hover.append(Component.text("Version: ", NamedTextColor.WHITE)).append(Component.text(provider.getMeta().getVersion(), NamedTextColor.GREEN));
+
+            if (description != null) {
+                hover.append(Component.newline())
+                        .append(Component.text("Description: ", NamedTextColor.WHITE))
+                        .append(Component.text(description, NamedTextColor.GREEN));
+            }
+
+            if (provider.getMeta().getWebsite() != null) {
+                hover.append(Component.newline())
+                        .append(Component.text("Website: ", NamedTextColor.WHITE))
+                        .append(Component.text(provider.getMeta().getWebsite(), NamedTextColor.GREEN));
+            }
+
+            if (!provider.getMeta().getAuthors().isEmpty()) {
+                hover.append(Component.newline());
+                if (provider.getMeta().getAuthors().size() == 1) {
+                    hover.append(Component.text("Author: "));
+                } else {
+                    hover.append(Component.text("Authors: "));
+                }
+
+                hover.append(getAuthors(provider.getMeta()));
+            }
+
+            pluginName = pluginName.hoverEvent(hover.build());
+        }
+        // Purpur end - Improve output of plugins command
 
         builder.append(pluginName);
 
@@ -126,6 +_,23 @@
         return componentHeader.append(Component.text(":")).build();
     }
 
+    // Purpur start - Improve output of plugins command
+    private static TextComponent getAuthors(final PluginMeta pluginMeta) {
+        TextComponent.Builder builder = Component.text();
+        List<String> authors = pluginMeta.getAuthors();
+
+        for (int i = 0; i < authors.size(); i++) {
+            if (i > 0) {
+                builder.append(Component.text(i < authors.size() - 1 ? ", " : " and ", NamedTextColor.WHITE));
+            }
+
+            builder.append(Component.text(authors.get(i), NamedTextColor.GREEN));
+        }
+
+        return builder.build();
+    }
+    // Purpur end - Improve output of plugins command
+
     private static Component asPlainComponents(final String strings) {
         final net.kyori.adventure.text.TextComponent.Builder builder = Component.text();
         for (final String string : strings.split("\n")) {
@@ -186,25 +_,25 @@
         final int sizePaperPlugins = paperPlugins.size();
         final int sizeSpigotPlugins = spigotPlugins.size();
         final int sizePlugins = sizePaperPlugins + sizeSpigotPlugins;
-        final boolean hasAllPluginTypes = (sizePaperPlugins > 0 && sizeSpigotPlugins > 0);
+        final boolean hasAllPluginTypes = true; // Purpur - Improve output of plugins command
 
         final Component infoMessage = Component.text().append(INFO_ICON_SERVER_PLUGIN).append(Component.text("Server Plugins (%s):".formatted(sizePlugins), NamedTextColor.WHITE)).build();
 
         sender.sendMessage(infoMessage);
 
-        if (!paperPlugins.isEmpty()) {
+        //if (!paperPlugins.isEmpty()) { // Purpur - Improve output of plugins command
             sender.sendMessage(header("Paper Plugins", 0x0288D1, sizePaperPlugins, hasAllPluginTypes));
-        }
+        //} // Purpur - Improve output of plugins command
 
-        for (final Component component : formatProviders(paperPlugins)) {
+        for (final Component component : formatProviders(paperPlugins, sender)) { // Purpur - Improve output of plugins command
             sender.sendMessage(component);
         }
 
-        if (!spigotPlugins.isEmpty()) {
+        //if (!spigotPlugins.isEmpty()) { // Purpur - Improve output of plugins command
             sender.sendMessage(header("Bukkit Plugins", 0xED8106, sizeSpigotPlugins, hasAllPluginTypes));
-        }
+        //} // Purpur - Improve output of plugins command
 
-        for (final Component component : formatProviders(spigotPlugins)) {
+        for (final Component component : formatProviders(spigotPlugins, sender)) { // Purpur - Improve output of plugins command
             sender.sendMessage(component);
         }
 
